/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  VRFConsumerBaseV2Upgradeable,
  VRFConsumerBaseV2UpgradeableInterface,
} from "../../../../../../@chainlink/contracts/src/v0.8/dev/VRFConsumerBaseV2Upgradeable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class VRFConsumerBaseV2Upgradeable__factory {
  static readonly abi = _abi;
  static createInterface(): VRFConsumerBaseV2UpgradeableInterface {
    return new utils.Interface(_abi) as VRFConsumerBaseV2UpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFConsumerBaseV2Upgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VRFConsumerBaseV2Upgradeable;
  }
}

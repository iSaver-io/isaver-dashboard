/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  WhiteList,
  WhiteListInterface,
} from "../../../contracts/extensions/WhiteList";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "WhiteListAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "WhiteListRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isAddressInWhiteList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class WhiteList__factory {
  static readonly abi = _abi;
  static createInterface(): WhiteListInterface {
    return new Interface(_abi) as WhiteListInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): WhiteList {
    return new Contract(address, _abi, runner) as unknown as WhiteList;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ContractManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "getAvatarsAddress()": FunctionFragment;
    "getBirthdayPrizesPool()": FunctionFragment;
    "getMomentoPrizesPool()": FunctionFragment;
    "getPowersAddress()": FunctionFragment;
    "getRafflesAddress()": FunctionFragment;
    "getReferralManagerAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSavTokenAddress()": FunctionFragment;
    "getSavrTokenAddress()": FunctionFragment;
    "getStakingAddress()": FunctionFragment;
    "getTeamsAddress()": FunctionFragment;
    "getTicketAddress()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateAvatars(address)": FunctionFragment;
    "updateBirthdayPrizesPool(address)": FunctionFragment;
    "updateMomentoPool(address)": FunctionFragment;
    "updatePowers(address)": FunctionFragment;
    "updateRaffles(address)": FunctionFragment;
    "updateReferralManager(address)": FunctionFragment;
    "updateSavToken(address)": FunctionFragment;
    "updateSavrToken(address)": FunctionFragment;
    "updateStaking(address)": FunctionFragment;
    "updateTeams(address)": FunctionFragment;
    "updateTicket(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADER_ROLE"
      | "getAvatarsAddress"
      | "getBirthdayPrizesPool"
      | "getMomentoPrizesPool"
      | "getPowersAddress"
      | "getRafflesAddress"
      | "getReferralManagerAddress"
      | "getRoleAdmin"
      | "getSavTokenAddress"
      | "getSavrTokenAddress"
      | "getStakingAddress"
      | "getTeamsAddress"
      | "getTicketAddress"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updateAvatars"
      | "updateBirthdayPrizesPool"
      | "updateMomentoPool"
      | "updatePowers"
      | "updateRaffles"
      | "updateReferralManager"
      | "updateSavToken"
      | "updateSavrToken"
      | "updateStaking"
      | "updateTeams"
      | "updateTicket"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvatarsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBirthdayPrizesPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMomentoPrizesPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowersAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRafflesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSavTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSavrTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAvatars",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBirthdayPrizesPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMomentoPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePowers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRaffles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSavToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSavrToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStaking",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateTeams", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateTicket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvatarsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBirthdayPrizesPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMomentoPrizesPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRafflesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavrTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAvatars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBirthdayPrizesPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMomentoPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRaffles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSavToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSavrToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTeams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ContractManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getAvatarsAddress(overrides?: CallOverrides): Promise<[string]>;

    getBirthdayPrizesPool(overrides?: CallOverrides): Promise<[string]>;

    getMomentoPrizesPool(overrides?: CallOverrides): Promise<[string]>;

    getPowersAddress(overrides?: CallOverrides): Promise<[string]>;

    getRafflesAddress(overrides?: CallOverrides): Promise<[string]>;

    getReferralManagerAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSavTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getSavrTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getStakingAddress(overrides?: CallOverrides): Promise<[string]>;

    getTeamsAddress(overrides?: CallOverrides): Promise<[string]>;

    getTicketAddress(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAvatars(
      _avatars: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateBirthdayPrizesPool(
      _birthdayPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMomentoPool(
      _momentoPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePowers(
      _powers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRaffles(
      _raffles: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReferralManager(
      _referralManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSavToken(
      _savToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSavrToken(
      _savrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStaking(
      _staking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTeams(
      _teams: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTicket(
      _ticket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  getAvatarsAddress(overrides?: CallOverrides): Promise<string>;

  getBirthdayPrizesPool(overrides?: CallOverrides): Promise<string>;

  getMomentoPrizesPool(overrides?: CallOverrides): Promise<string>;

  getPowersAddress(overrides?: CallOverrides): Promise<string>;

  getRafflesAddress(overrides?: CallOverrides): Promise<string>;

  getReferralManagerAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSavTokenAddress(overrides?: CallOverrides): Promise<string>;

  getSavrTokenAddress(overrides?: CallOverrides): Promise<string>;

  getStakingAddress(overrides?: CallOverrides): Promise<string>;

  getTeamsAddress(overrides?: CallOverrides): Promise<string>;

  getTicketAddress(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAvatars(
    _avatars: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateBirthdayPrizesPool(
    _birthdayPrizesPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMomentoPool(
    _momentoPrizesPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePowers(
    _powers: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRaffles(
    _raffles: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReferralManager(
    _referralManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSavToken(
    _savToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSavrToken(
    _savrToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStaking(
    _staking: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTeams(
    _teams: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTicket(
    _ticket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    getAvatarsAddress(overrides?: CallOverrides): Promise<string>;

    getBirthdayPrizesPool(overrides?: CallOverrides): Promise<string>;

    getMomentoPrizesPool(overrides?: CallOverrides): Promise<string>;

    getPowersAddress(overrides?: CallOverrides): Promise<string>;

    getRafflesAddress(overrides?: CallOverrides): Promise<string>;

    getReferralManagerAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSavTokenAddress(overrides?: CallOverrides): Promise<string>;

    getSavrTokenAddress(overrides?: CallOverrides): Promise<string>;

    getStakingAddress(overrides?: CallOverrides): Promise<string>;

    getTeamsAddress(overrides?: CallOverrides): Promise<string>;

    getTicketAddress(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAvatars(_avatars: string, overrides?: CallOverrides): Promise<void>;

    updateBirthdayPrizesPool(
      _birthdayPrizesPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMomentoPool(
      _momentoPrizesPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePowers(_powers: string, overrides?: CallOverrides): Promise<void>;

    updateRaffles(_raffles: string, overrides?: CallOverrides): Promise<void>;

    updateReferralManager(
      _referralManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSavToken(_savToken: string, overrides?: CallOverrides): Promise<void>;

    updateSavrToken(
      _savrToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStaking(_staking: string, overrides?: CallOverrides): Promise<void>;

    updateTeams(_teams: string, overrides?: CallOverrides): Promise<void>;

    updateTicket(_ticket: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getAvatarsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBirthdayPrizesPool(overrides?: CallOverrides): Promise<BigNumber>;

    getMomentoPrizesPool(overrides?: CallOverrides): Promise<BigNumber>;

    getPowersAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRafflesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getReferralManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSavTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSavrTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTeamsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTicketAddress(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAvatars(
      _avatars: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateBirthdayPrizesPool(
      _birthdayPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMomentoPool(
      _momentoPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePowers(
      _powers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRaffles(
      _raffles: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReferralManager(
      _referralManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSavToken(
      _savToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSavrToken(
      _savrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStaking(
      _staking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTeams(
      _teams: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTicket(
      _ticket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvatarsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBirthdayPrizesPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMomentoPrizesPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowersAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRafflesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReferralManagerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSavTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSavrTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeamsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTicketAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAvatars(
      _avatars: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateBirthdayPrizesPool(
      _birthdayPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMomentoPool(
      _momentoPrizesPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePowers(
      _powers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRaffles(
      _raffles: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReferralManager(
      _referralManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSavToken(
      _savToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSavrToken(
      _savrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStaking(
      _staking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTeams(
      _teams: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTicket(
      _ticket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

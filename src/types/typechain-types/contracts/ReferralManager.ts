/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IReferralManager {
  export type AddDividendsParamsStruct = {
    user: AddressLike;
    reward: BigNumberish;
    referral: AddressLike;
    level: BigNumberish;
    depositAmount: BigNumberish;
    stakingPlanId: BigNumberish;
    reason: BigNumberish;
  };

  export type AddDividendsParamsStructOutput = [
    user: string,
    reward: bigint,
    referral: string,
    level: bigint,
    depositAmount: bigint,
    stakingPlanId: bigint,
    reason: bigint
  ] & {
    user: string;
    reward: bigint;
    referral: string;
    level: bigint;
    depositAmount: bigint;
    stakingPlanId: bigint;
    reason: bigint;
  };

  export type ReferralStruct = {
    referralAddress: AddressLike;
    level: BigNumberish;
    activationDate: BigNumberish;
    isReferralSubscriptionActive: boolean;
  };

  export type ReferralStructOutput = [
    referralAddress: string,
    level: bigint,
    activationDate: bigint,
    isReferralSubscriptionActive: boolean
  ] & {
    referralAddress: string;
    level: bigint;
    activationDate: bigint;
    isReferralSubscriptionActive: boolean;
  };
}

export interface ReferralManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "LEVELS"
      | "REFERRAL_PERCENTS"
      | "SUBSCRIPTION_PERIOD_DAYS"
      | "UPGRADER_ROLE"
      | "addUserDividends"
      | "calculateRefReward"
      | "claimDividends"
      | "fullSubscriptionCost"
      | "getReferralLevels"
      | "getRoleAdmin"
      | "getTimestamp"
      | "getUser1LvlReferrals"
      | "getUserInfo"
      | "getUserReferralsByLevel"
      | "getUserReferrer"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "levelSubscriptionCost"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setMyReferrer"
      | "setUserReferrer"
      | "subscribeToAllLevels"
      | "subscribeToLevel"
      | "supportsInterface"
      | "updateFullSubscriptionCost"
      | "updateLevelSubscriptionCost"
      | "updateReferralPercent"
      | "updateSubscriptionPeriod"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userHasAnySubscription"
      | "userHasSubscription"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "DividendsAdded"
      | "Initialized"
      | "LiquidityWithdrawnByAdmin"
      | "ReferralAdded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Subscribed"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LEVELS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_PERCENTS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUserDividends",
    values: [IReferralManager.AddDividendsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividends",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullSubscriptionCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser1LvlReferrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralsByLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelSubscriptionCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMyReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserReferrer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToAllLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFullSubscriptionCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLevelSubscriptionCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasAnySubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LEVELS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_PERCENTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUser1LvlReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralsByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMyReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToAllLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFullSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLevelSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendsAddedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referral: AddressLike,
    level: BigNumberish,
    depositAmount: BigNumberish,
    rewardAmount: BigNumberish,
    stakingPlanId: BigNumberish,
    reason: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referral: string,
    level: bigint,
    depositAmount: bigint,
    rewardAmount: bigint,
    stakingPlanId: bigint,
    reason: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referral: string;
    level: bigint;
    depositAmount: bigint;
    rewardAmount: bigint;
    stakingPlanId: bigint;
    reason: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityWithdrawnByAdminEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralAddedEvent {
  export type InputTuple = [referrer: AddressLike, referral: AddressLike];
  export type OutputTuple = [referrer: string, referral: string];
  export interface OutputObject {
    referrer: string;
    referral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    subscriber: AddressLike,
    levels: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    subscriber: string,
    levels: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    subscriber: string;
    levels: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReferralManager extends BaseContract {
  connect(runner?: ContractRunner | null): ReferralManager;
  waitForDeployment(): Promise<this>;

  interface: ReferralManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  LEVELS: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_PERCENTS: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  SUBSCRIPTION_PERIOD_DAYS: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  addUserDividends: TypedContractMethod<
    [params: IReferralManager.AddDividendsParamsStruct],
    [void],
    "nonpayable"
  >;

  calculateRefReward: TypedContractMethod<
    [amount: BigNumberish, level: BigNumberish],
    [bigint],
    "view"
  >;

  claimDividends: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fullSubscriptionCost: TypedContractMethod<[], [bigint], "view">;

  getReferralLevels: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTimestamp: TypedContractMethod<[], [bigint], "view">;

  getUser1LvlReferrals: TypedContractMethod<
    [userAddress: AddressLike],
    [string[]],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [userAddress: AddressLike],
    [
      [
        string,
        bigint[],
        bigint,
        bigint,
        string[],
        bigint[],
        bigint,
        boolean,
        bigint
      ] & {
        referrer: string;
        activeLevels: bigint[];
        totalDividends: bigint;
        totalClaimedDividends: bigint;
        referrals_1_lvl: string[];
        refCount: bigint[];
        totalReferrals: bigint;
        isActiveSubscriber: boolean;
        activationDate: bigint;
      }
    ],
    "view"
  >;

  getUserReferralsByLevel: TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [IReferralManager.ReferralStructOutput[]],
    "view"
  >;

  getUserReferrer: TypedContractMethod<[user: AddressLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      contractManager_: AddressLike,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  levelSubscriptionCost: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMyReferrer: TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserReferrer: TypedContractMethod<
    [user: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  subscribeToAllLevels: TypedContractMethod<[], [void], "nonpayable">;

  subscribeToLevel: TypedContractMethod<
    [level: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateFullSubscriptionCost: TypedContractMethod<
    [cost: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLevelSubscriptionCost: TypedContractMethod<
    [cost: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateReferralPercent: TypedContractMethod<
    [level: BigNumberish, percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSubscriptionPeriod: TypedContractMethod<
    [durationDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userHasAnySubscription: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  userHasSubscription: TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [boolean],
    "view"
  >;

  withdrawLiquidity: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LEVELS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_PERCENTS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUBSCRIPTION_PERIOD_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addUserDividends"
  ): TypedContractMethod<
    [params: IReferralManager.AddDividendsParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateRefReward"
  ): TypedContractMethod<
    [amount: BigNumberish, level: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimDividends"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fullSubscriptionCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferralLevels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser1LvlReferrals"
  ): TypedContractMethod<[userAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [
      [
        string,
        bigint[],
        bigint,
        bigint,
        string[],
        bigint[],
        bigint,
        boolean,
        bigint
      ] & {
        referrer: string;
        activeLevels: bigint[];
        totalDividends: bigint;
        totalClaimedDividends: bigint;
        referrals_1_lvl: string[];
        refCount: bigint[];
        totalReferrals: bigint;
        isActiveSubscriber: boolean;
        activationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReferralsByLevel"
  ): TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [IReferralManager.ReferralStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReferrer"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      contractManager_: AddressLike,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "levelSubscriptionCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMyReferrer"
  ): TypedContractMethod<[referrer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserReferrer"
  ): TypedContractMethod<
    [user: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribeToAllLevels"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribeToLevel"
  ): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateFullSubscriptionCost"
  ): TypedContractMethod<[cost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLevelSubscriptionCost"
  ): TypedContractMethod<[cost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReferralPercent"
  ): TypedContractMethod<
    [level: BigNumberish, percent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSubscriptionPeriod"
  ): TypedContractMethod<[durationDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userHasAnySubscription"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userHasSubscription"
  ): TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "DividendsAdded"
  ): TypedContractEvent<
    DividendsAddedEvent.InputTuple,
    DividendsAddedEvent.OutputTuple,
    DividendsAddedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityWithdrawnByAdmin"
  ): TypedContractEvent<
    LiquidityWithdrawnByAdminEvent.InputTuple,
    LiquidityWithdrawnByAdminEvent.OutputTuple,
    LiquidityWithdrawnByAdminEvent.OutputObject
  >;
  getEvent(
    key: "ReferralAdded"
  ): TypedContractEvent<
    ReferralAddedEvent.InputTuple,
    ReferralAddedEvent.OutputTuple,
    ReferralAddedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "DividendsAdded(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DividendsAddedEvent.InputTuple,
      DividendsAddedEvent.OutputTuple,
      DividendsAddedEvent.OutputObject
    >;
    DividendsAdded: TypedContractEvent<
      DividendsAddedEvent.InputTuple,
      DividendsAddedEvent.OutputTuple,
      DividendsAddedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidityWithdrawnByAdmin(address,uint256)": TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;
    LiquidityWithdrawnByAdmin: TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;

    "ReferralAdded(address,address)": TypedContractEvent<
      ReferralAddedEvent.InputTuple,
      ReferralAddedEvent.OutputTuple,
      ReferralAddedEvent.OutputObject
    >;
    ReferralAdded: TypedContractEvent<
      ReferralAddedEvent.InputTuple,
      ReferralAddedEvent.OutputTuple,
      ReferralAddedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Subscribed(address,uint256,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

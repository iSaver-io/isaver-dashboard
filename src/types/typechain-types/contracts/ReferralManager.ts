/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IReferralManager {
  export type AddDividendsParamsStruct = {
    user: string;
    reward: BigNumberish;
    referral: string;
    level: BigNumberish;
    depositAmount: BigNumberish;
    stakingPlanId: BigNumberish;
    reason: BigNumberish;
  };

  export type AddDividendsParamsStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    reward: BigNumber;
    referral: string;
    level: BigNumber;
    depositAmount: BigNumber;
    stakingPlanId: BigNumber;
    reason: BigNumber;
  };

  export type ReferralStruct = {
    referralAddress: string;
    level: BigNumberish;
    activationDate: BigNumberish;
    isReferralSubscriptionActive: boolean;
  };

  export type ReferralStructOutput = [string, BigNumber, BigNumber, boolean] & {
    referralAddress: string;
    level: BigNumber;
    activationDate: BigNumber;
    isReferralSubscriptionActive: boolean;
  };
}

export interface ReferralManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "REFERRAL_PERCENTS(uint256)": FunctionFragment;
    "SUBSCRIPTION_LEVELS()": FunctionFragment;
    "SUBSCRIPTION_PERIOD_DAYS()": FunctionFragment;
    "TOTAL_LEVELS()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "addUserDividends((address,uint256,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateRefReward(uint256,uint256)": FunctionFragment;
    "claimDividends(uint256)": FunctionFragment;
    "extract(address,uint256)": FunctionFragment;
    "fullSubscriptionCost()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSubscriptionReferralLevels()": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getTotalReferralLevels()": FunctionFragment;
    "getUser1LvlReferrals(address)": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getUserReferralsByLevel(address,uint256)": FunctionFragment;
    "getUserReferrer(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "levelSubscriptionCost()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renewPowerSubscriptionA(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMyReferrer(address)": FunctionFragment;
    "setUserReferrer(address,address)": FunctionFragment;
    "subscribeToAllLevels()": FunctionFragment;
    "subscribeToLevel(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateFullSubscriptionCost(uint256)": FunctionFragment;
    "updateLevelSubscriptionCost(uint256)": FunctionFragment;
    "updateReferralPercent(uint256,uint256)": FunctionFragment;
    "updateSubscriptionPeriod(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userHasActivatedPowerA(address)": FunctionFragment;
    "userHasActivePowerA(address)": FunctionFragment;
    "userHasAnySubscription(address)": FunctionFragment;
    "userHasFullSubscription(address)": FunctionFragment;
    "userHasSubscription(address,uint256)": FunctionFragment;
    "withdrawLiquidity(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "REFERRAL_PERCENTS"
      | "SUBSCRIPTION_LEVELS"
      | "SUBSCRIPTION_PERIOD_DAYS"
      | "TOTAL_LEVELS"
      | "UPGRADER_ROLE"
      | "addUserDividends"
      | "calculateRefReward"
      | "claimDividends"
      | "extract"
      | "fullSubscriptionCost"
      | "getRoleAdmin"
      | "getSubscriptionReferralLevels"
      | "getTimestamp"
      | "getTotalReferralLevels"
      | "getUser1LvlReferrals"
      | "getUserInfo"
      | "getUserReferralsByLevel"
      | "getUserReferrer"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "levelSubscriptionCost"
      | "proxiableUUID"
      | "renewPowerSubscriptionA"
      | "renounceRole"
      | "revokeRole"
      | "setMyReferrer"
      | "setUserReferrer"
      | "subscribeToAllLevels"
      | "subscribeToLevel"
      | "supportsInterface"
      | "updateFullSubscriptionCost"
      | "updateLevelSubscriptionCost"
      | "updateReferralPercent"
      | "updateSubscriptionPeriod"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userHasActivatedPowerA"
      | "userHasActivePowerA"
      | "userHasAnySubscription"
      | "userHasFullSubscription"
      | "userHasSubscription"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_PERCENTS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_LEVELS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_LEVELS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUserDividends",
    values: [IReferralManager.AddDividendsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividends",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullSubscriptionCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser1LvlReferrals",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUserInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserReferralsByLevel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferrer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelSubscriptionCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewPowerSubscriptionA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMyReferrer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserReferrer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToAllLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFullSubscriptionCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLevelSubscriptionCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasActivatedPowerA",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userHasActivePowerA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasAnySubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasFullSubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSubscription",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_PERCENTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_LEVELS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_LEVELS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUser1LvlReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralsByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPowerSubscriptionA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMyReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToAllLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFullSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLevelSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasActivatedPowerA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userHasActivePowerA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasFullSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DividendsAdded(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DividendsClaimed(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ReferralAdded(address,address)": EventFragment;
    "ReferrerSet(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Subscribed(address,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DividendsAddedEventObject {
  referrer: string;
  referral: string;
  level: BigNumber;
  depositAmount: BigNumber;
  rewardAmount: BigNumber;
  stakingPlanId: BigNumber;
  reason: BigNumber;
  timestamp: BigNumber;
}
export type DividendsAddedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  DividendsAddedEventObject
>;

export type DividendsAddedEventFilter = TypedEventFilter<DividendsAddedEvent>;

export interface DividendsClaimedEventObject {
  owner: string;
  amount: BigNumber;
}
export type DividendsClaimedEvent = TypedEvent<
  [string, BigNumber],
  DividendsClaimedEventObject
>;

export type DividendsClaimedEventFilter =
  TypedEventFilter<DividendsClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ReferralAddedEventObject {
  referrer: string;
  referral: string;
}
export type ReferralAddedEvent = TypedEvent<
  [string, string],
  ReferralAddedEventObject
>;

export type ReferralAddedEventFilter = TypedEventFilter<ReferralAddedEvent>;

export interface ReferrerSetEventObject {
  referrer: string;
  referral: string;
}
export type ReferrerSetEvent = TypedEvent<
  [string, string],
  ReferrerSetEventObject
>;

export type ReferrerSetEventFilter = TypedEventFilter<ReferrerSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SubscribedEventObject {
  subscriber: string;
  levels: BigNumber;
  timestamp: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ReferralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REFERRAL_PERCENTS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SUBSCRIPTION_LEVELS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_LEVELS(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimDividends(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fullSubscriptionCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUser1LvlReferrals(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        referrer: string;
        activeLevels: BigNumber[];
        totalDividends: BigNumber;
        totalClaimedDividends: BigNumber;
        referrals_1_lvl: string[];
        refCount: BigNumber[];
        totalReferrals: BigNumber;
        isActiveSubscriber: boolean;
        hasActivatePowerA: boolean;
        activationDate: BigNumber;
      }
    >;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IReferralManager.ReferralStructOutput[]]>;

    getUserReferrer(user: string, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      contractManager_: string,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    levelSubscriptionCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMyReferrer(
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribeToAllLevels(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribeToLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateFullSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateLevelSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReferralPercent(
      level: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubscriptionPeriod(
      durationDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasFullSubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawLiquidity(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  REFERRAL_PERCENTS(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SUBSCRIPTION_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

  SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  addUserDividends(
    params: IReferralManager.AddDividendsParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateRefReward(
    amount: BigNumberish,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimDividends(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extract(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fullSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSubscriptionReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

  getUser1LvlReferrals(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserInfo(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      BigNumber,
      boolean,
      boolean,
      BigNumber
    ] & {
      referrer: string;
      activeLevels: BigNumber[];
      totalDividends: BigNumber;
      totalClaimedDividends: BigNumber;
      referrals_1_lvl: string[];
      refCount: BigNumber[];
      totalReferrals: BigNumber;
      isActiveSubscriber: boolean;
      hasActivatePowerA: boolean;
      activationDate: BigNumber;
    }
  >;

  getUserReferralsByLevel(
    userAddress: string,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IReferralManager.ReferralStructOutput[]>;

  getUserReferrer(user: string, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    contractManager_: string,
    fullSubscriptionCost_: BigNumberish,
    levelSubscriptionCost_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  levelSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renewPowerSubscriptionA(
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMyReferrer(
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUserReferrer(
    user: string,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribeToAllLevels(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribeToLevel(
    level: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateFullSubscriptionCost(
    cost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateLevelSubscriptionCost(
    cost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReferralPercent(
    level: BigNumberish,
    percent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubscriptionPeriod(
    durationDays: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  userHasActivatedPowerA(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasActivePowerA(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasAnySubscription(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasFullSubscription(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasSubscription(
    user: string,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawLiquidity(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    REFERRAL_PERCENTS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SUBSCRIPTION_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDividends(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

    getUser1LvlReferrals(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        referrer: string;
        activeLevels: BigNumber[];
        totalDividends: BigNumber;
        totalClaimedDividends: BigNumber;
        referrals_1_lvl: string[];
        refCount: BigNumber[];
        totalReferrals: BigNumber;
        isActiveSubscriber: boolean;
        hasActivatePowerA: boolean;
        activationDate: BigNumber;
      }
    >;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IReferralManager.ReferralStructOutput[]>;

    getUserReferrer(user: string, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      contractManager_: string,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    levelSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMyReferrer(referrer: string, overrides?: CallOverrides): Promise<void>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToAllLevels(overrides?: CallOverrides): Promise<void>;

    subscribeToLevel(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateFullSubscriptionCost(
      cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLevelSubscriptionCost(
      cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralPercent(
      level: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionPeriod(
      durationDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasFullSubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawLiquidity(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "DividendsAdded(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      referrer?: string | null,
      referral?: string | null,
      level?: BigNumberish | null,
      depositAmount?: null,
      rewardAmount?: null,
      stakingPlanId?: null,
      reason?: null,
      timestamp?: null
    ): DividendsAddedEventFilter;
    DividendsAdded(
      referrer?: string | null,
      referral?: string | null,
      level?: BigNumberish | null,
      depositAmount?: null,
      rewardAmount?: null,
      stakingPlanId?: null,
      reason?: null,
      timestamp?: null
    ): DividendsAddedEventFilter;

    "DividendsClaimed(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): DividendsClaimedEventFilter;
    DividendsClaimed(
      owner?: string | null,
      amount?: null
    ): DividendsClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ReferralAdded(address,address)"(
      referrer?: string | null,
      referral?: string | null
    ): ReferralAddedEventFilter;
    ReferralAdded(
      referrer?: string | null,
      referral?: string | null
    ): ReferralAddedEventFilter;

    "ReferrerSet(address,address)"(
      referrer?: string | null,
      referral?: string | null
    ): ReferrerSetEventFilter;
    ReferrerSet(
      referrer?: string | null,
      referral?: string | null
    ): ReferrerSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Subscribed(address,uint256,uint256)"(
      subscriber?: string | null,
      levels?: null,
      timestamp?: BigNumberish | null
    ): SubscribedEventFilter;
    Subscribed(
      subscriber?: string | null,
      levels?: null,
      timestamp?: BigNumberish | null
    ): SubscribedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_PERCENTS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SUBSCRIPTION_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_LEVELS(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDividends(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fullSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

    getUser1LvlReferrals(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReferrer(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      contractManager_: string,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    levelSubscriptionCost(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMyReferrer(
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribeToAllLevels(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribeToLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFullSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateLevelSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReferralPercent(
      level: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubscriptionPeriod(
      durationDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasFullSubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidity(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REFERRAL_PERCENTS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCRIPTION_LEVELS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCRIPTION_PERIOD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_LEVELS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDividends(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fullSubscriptionCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalReferralLevels(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser1LvlReferrals(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReferrer(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      contractManager_: string,
      fullSubscriptionCost_: BigNumberish,
      levelSubscriptionCost_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    levelSubscriptionCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMyReferrer(
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribeToAllLevels(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribeToLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFullSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateLevelSubscriptionCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReferralPercent(
      level: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionPeriod(
      durationDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasFullSubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace AvatarsSell {
  export type SoldStatisticStruct = {
    amount: BigNumberish;
    cumulativeCost: BigNumberish;
  };

  export type SoldStatisticStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    cumulativeCost: BigNumber;
  };
}

export interface AvatarsSellInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "basePrice()": FunctionFragment;
    "baseTimestamp()": FunctionFragment;
    "buyAvatar()": FunctionFragment;
    "buyPower(uint256,uint256)": FunctionFragment;
    "divider()": FunctionFragment;
    "getCurrentAvatarPrice()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSoldStatistic()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inflationPeriod()": FunctionFragment;
    "inflationRate()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "powerPrices(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBasePrice(uint256)": FunctionFragment;
    "updateDivider(uint256)": FunctionFragment;
    "updateInflationPeriod(uint256)": FunctionFragment;
    "updateInflationRate(uint256)": FunctionFragment;
    "updatePowerPrice(uint256,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADER_ROLE"
      | "basePrice"
      | "baseTimestamp"
      | "buyAvatar"
      | "buyPower"
      | "divider"
      | "getCurrentAvatarPrice"
      | "getRoleAdmin"
      | "getSoldStatistic"
      | "grantRole"
      | "hasRole"
      | "inflationPeriod"
      | "inflationRate"
      | "initialize"
      | "pause"
      | "paused"
      | "powerPrices"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "updateBasePrice"
      | "updateDivider"
      | "updateInflationPeriod"
      | "updateInflationRate"
      | "updatePowerPrice"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "basePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyAvatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "divider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentAvatarPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoldStatistic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inflationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBasePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDivider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInflationPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInflationRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePowerPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "basePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAvatarPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoldStatistic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDivider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInflationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePowerPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AvatarBought(address,uint256,uint256)": EventFragment;
    "BasePowerPriceUpdated(uint256,uint256)": EventFragment;
    "BasePriceUpdated(uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "InflationPeriodUpdated(uint256)": EventFragment;
    "InflationRateUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "PowerBought(address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasePowerPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AvatarBoughtEventObject {
  buyer: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type AvatarBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AvatarBoughtEventObject
>;

export type AvatarBoughtEventFilter = TypedEventFilter<AvatarBoughtEvent>;

export interface BasePowerPriceUpdatedEventObject {
  powerId: BigNumber;
  newPowerPrice: BigNumber;
}
export type BasePowerPriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BasePowerPriceUpdatedEventObject
>;

export type BasePowerPriceUpdatedEventFilter =
  TypedEventFilter<BasePowerPriceUpdatedEvent>;

export interface BasePriceUpdatedEventObject {
  newBasePrice: BigNumber;
}
export type BasePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  BasePriceUpdatedEventObject
>;

export type BasePriceUpdatedEventFilter =
  TypedEventFilter<BasePriceUpdatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InflationPeriodUpdatedEventObject {
  newInflationPeriod: BigNumber;
}
export type InflationPeriodUpdatedEvent = TypedEvent<
  [BigNumber],
  InflationPeriodUpdatedEventObject
>;

export type InflationPeriodUpdatedEventFilter =
  TypedEventFilter<InflationPeriodUpdatedEvent>;

export interface InflationRateUpdatedEventObject {
  newInflationRate: BigNumber;
}
export type InflationRateUpdatedEvent = TypedEvent<
  [BigNumber],
  InflationRateUpdatedEventObject
>;

export type InflationRateUpdatedEventFilter =
  TypedEventFilter<InflationRateUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PowerBoughtEventObject {
  buyer: string;
  powerId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
}
export type PowerBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PowerBoughtEventObject
>;

export type PowerBoughtEventFilter = TypedEventFilter<PowerBoughtEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AvatarsSell extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvatarsSellInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    basePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyAvatar(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyPower(
      powerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    divider(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentAvatarPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSoldStatistic(
      overrides?: CallOverrides
    ): Promise<
      [
        AvatarsSell.SoldStatisticStructOutput,
        AvatarsSell.SoldStatisticStructOutput[]
      ]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inflationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    inflationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      contractManagerAddress_: string,
      basePrice_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    powerPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDivider(
      divider_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateInflationRate(
      _inflationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePowerPrice(
      powerId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  basePrice(overrides?: CallOverrides): Promise<BigNumber>;

  baseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  buyAvatar(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyPower(
    powerId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  divider(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentAvatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSoldStatistic(
    overrides?: CallOverrides
  ): Promise<
    [
      AvatarsSell.SoldStatisticStructOutput,
      AvatarsSell.SoldStatisticStructOutput[]
    ]
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    contractManagerAddress_: string,
    basePrice_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  powerPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateBasePrice(
    _basePrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDivider(
    divider_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateInflationPeriod(
    _inflationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateInflationRate(
    _inflationRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePowerPrice(
    powerId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    basePrice(overrides?: CallOverrides): Promise<BigNumber>;

    baseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    buyAvatar(overrides?: CallOverrides): Promise<void>;

    buyPower(
      powerId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    divider(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAvatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSoldStatistic(
      overrides?: CallOverrides
    ): Promise<
      [
        AvatarsSell.SoldStatisticStructOutput,
        AvatarsSell.SoldStatisticStructOutput[]
      ]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      contractManagerAddress_: string,
      basePrice_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    powerPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateBasePrice(
      _basePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDivider(
      divider_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInflationRate(
      _inflationRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePowerPrice(
      powerId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AvatarBought(address,uint256,uint256)"(
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): AvatarBoughtEventFilter;
    AvatarBought(
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): AvatarBoughtEventFilter;

    "BasePowerPriceUpdated(uint256,uint256)"(
      powerId?: BigNumberish | null,
      newPowerPrice?: null
    ): BasePowerPriceUpdatedEventFilter;
    BasePowerPriceUpdated(
      powerId?: BigNumberish | null,
      newPowerPrice?: null
    ): BasePowerPriceUpdatedEventFilter;

    "BasePriceUpdated(uint256)"(
      newBasePrice?: null
    ): BasePriceUpdatedEventFilter;
    BasePriceUpdated(newBasePrice?: null): BasePriceUpdatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "InflationPeriodUpdated(uint256)"(
      newInflationPeriod?: null
    ): InflationPeriodUpdatedEventFilter;
    InflationPeriodUpdated(
      newInflationPeriod?: null
    ): InflationPeriodUpdatedEventFilter;

    "InflationRateUpdated(uint256)"(
      newInflationRate?: null
    ): InflationRateUpdatedEventFilter;
    InflationRateUpdated(
      newInflationRate?: null
    ): InflationRateUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PowerBought(address,uint256,uint256,uint256)"(
      buyer?: string | null,
      powerId?: BigNumberish | null,
      amount?: null,
      price?: null
    ): PowerBoughtEventFilter;
    PowerBought(
      buyer?: string | null,
      powerId?: BigNumberish | null,
      amount?: null,
      price?: null
    ): PowerBoughtEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    basePrice(overrides?: CallOverrides): Promise<BigNumber>;

    baseTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    buyAvatar(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    buyPower(
      powerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    divider(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAvatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoldStatistic(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      contractManagerAddress_: string,
      basePrice_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    powerPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDivider(
      divider_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateInflationRate(
      _inflationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePowerPrice(
      powerId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyAvatar(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyPower(
      powerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    divider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentAvatarPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoldStatistic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      contractManagerAddress_: string,
      basePrice_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDivider(
      divider_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateInflationRate(
      _inflationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePowerPrice(
      powerId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

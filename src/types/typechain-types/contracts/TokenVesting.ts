/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TokenVesting {
  export type VestingScheduleStruct = {
    beneficiary: AddressLike;
    cliff: BigNumberish;
    start: BigNumberish;
    duration: BigNumberish;
    slicePeriodSeconds: BigNumberish;
    revocable: boolean;
    amountTotal: BigNumberish;
    released: BigNumberish;
    revoked: boolean;
  };

  export type VestingScheduleStructOutput = [
    beneficiary: string,
    cliff: bigint,
    start: bigint,
    duration: bigint,
    slicePeriodSeconds: bigint,
    revocable: boolean,
    amountTotal: bigint,
    released: bigint,
    revoked: boolean
  ] & {
    beneficiary: string;
    cliff: bigint;
    start: bigint;
    duration: bigint;
    slicePeriodSeconds: bigint;
    revocable: boolean;
    amountTotal: bigint;
    released: bigint;
    revoked: boolean;
  };

  export type VestingScheduleWithReleaseAmountStruct = {
    id: BigNumberish;
    schedule: TokenVesting.VestingScheduleStruct;
    releaseAmount: BigNumberish;
  };

  export type VestingScheduleWithReleaseAmountStructOutput = [
    id: bigint,
    schedule: TokenVesting.VestingScheduleStructOutput,
    releaseAmount: bigint
  ] & {
    id: bigint;
    schedule: TokenVesting.VestingScheduleStructOutput;
    releaseAmount: bigint;
  };
}

export interface TokenVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADER_ROLE"
      | "computeReleasableAmount"
      | "createVestingSchedule"
      | "createVestingSchedules"
      | "getReservesBalance"
      | "getRoleAdmin"
      | "getVestingScheduleById"
      | "getVestingSchedules"
      | "getVestingSchedulesByBeneficiary"
      | "getVestingSchedulesCount"
      | "getVestingSchedulesCountByBeneficiary"
      | "getVestingSchedulesIdsByBeneficiary"
      | "getVestingSchedulesTotalAmount"
      | "getVestingSchedulesWithReleasableAmountByBeneficiary"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "proxiableUUID"
      | "release"
      | "renounceRole"
      | "revoke"
      | "revokeRole"
      | "supportsInterface"
      | "updateVestingPool"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "Released"
      | "Revoked"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ScheduleCreated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedules",
    values: [
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingScheduleById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesIdsByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesWithReleasableAmountByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVestingPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingScheduleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesIdsByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesWithReleasableAmountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVestingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
  export type InputTuple = [
    vestingScheduleId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    vestingScheduleId: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    vestingScheduleId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [vestingScheduleId: BigNumberish];
  export type OutputTuple = [vestingScheduleId: bigint];
  export interface OutputObject {
    vestingScheduleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    vestingScheduleId: BigNumberish
  ];
  export type OutputTuple = [beneficiary: string, vestingScheduleId: bigint];
  export interface OutputObject {
    beneficiary: string;
    vestingScheduleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  computeReleasableAmount: TypedContractMethod<
    [vestingScheduleId: BigNumberish],
    [bigint],
    "view"
  >;

  createVestingSchedule: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createVestingSchedules: TypedContractMethod<
    [
      _beneficiaries: AddressLike[],
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getReservesBalance: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVestingScheduleById: TypedContractMethod<
    [id: BigNumberish],
    [TokenVesting.VestingScheduleStructOutput],
    "view"
  >;

  getVestingSchedules: TypedContractMethod<
    [],
    [TokenVesting.VestingScheduleStructOutput[]],
    "view"
  >;

  getVestingSchedulesByBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [TokenVesting.VestingScheduleStructOutput[]],
    "view"
  >;

  getVestingSchedulesCount: TypedContractMethod<[], [bigint], "view">;

  getVestingSchedulesCountByBeneficiary: TypedContractMethod<
    [_beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  getVestingSchedulesIdsByBeneficiary: TypedContractMethod<
    [_beneficiary: AddressLike],
    [bigint[]],
    "view"
  >;

  getVestingSchedulesTotalAmount: TypedContractMethod<[], [bigint], "view">;

  getVestingSchedulesWithReleasableAmountByBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [TokenVesting.VestingScheduleWithReleaseAmountStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [contractManagerAddress: AddressLike, vestingPoolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  release: TypedContractMethod<
    [vestingScheduleId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<
    [vestingScheduleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateVestingPool: TypedContractMethod<
    [pool: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeReleasableAmount"
  ): TypedContractMethod<[vestingScheduleId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createVestingSchedule"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVestingSchedules"
  ): TypedContractMethod<
    [
      _beneficiaries: AddressLike[],
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReservesBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVestingScheduleById"
  ): TypedContractMethod<
    [id: BigNumberish],
    [TokenVesting.VestingScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedules"
  ): TypedContractMethod<
    [],
    [TokenVesting.VestingScheduleStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedulesByBeneficiary"
  ): TypedContractMethod<
    [beneficiary: AddressLike],
    [TokenVesting.VestingScheduleStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedulesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesCountByBeneficiary"
  ): TypedContractMethod<[_beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesIdsByBeneficiary"
  ): TypedContractMethod<[_beneficiary: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesTotalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesWithReleasableAmountByBeneficiary"
  ): TypedContractMethod<
    [beneficiary: AddressLike],
    [TokenVesting.VestingScheduleWithReleaseAmountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [contractManagerAddress: AddressLike, vestingPoolAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [vestingScheduleId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [vestingScheduleId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateVestingPool"
  ): TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Released"
  ): TypedContractEvent<
    ReleasedEvent.InputTuple,
    ReleasedEvent.OutputTuple,
    ReleasedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleCreated"
  ): TypedContractEvent<
    ScheduleCreatedEvent.InputTuple,
    ScheduleCreatedEvent.OutputTuple,
    ScheduleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Released(uint256,address,uint256)": TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
    Released: TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;

    "Revoked(uint256)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ScheduleCreated(address,uint256)": TypedContractEvent<
      ScheduleCreatedEvent.InputTuple,
      ScheduleCreatedEvent.OutputTuple,
      ScheduleCreatedEvent.OutputObject
    >;
    ScheduleCreated: TypedContractEvent<
      ScheduleCreatedEvent.InputTuple,
      ScheduleCreatedEvent.OutputTuple,
      ScheduleCreatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IRaffles {
  export type RoundStruct = {
    id: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: BigNumberish;
    totalPrize: BigNumberish;
    maxTicketsFromOneMember: BigNumberish;
    tokensForOneTicket: BigNumberish;
    winnersForLevel: BigNumberish[];
    prizeForLevel: BigNumberish[];
    totalTickets: BigNumberish;
    members: AddressLike[];
    randomWord: BigNumberish;
    winners: AddressLike[][];
  };

  export type RoundStructOutput = [
    id: bigint,
    startTime: bigint,
    duration: bigint,
    isClosed: boolean,
    isOracleFulfilled: boolean,
    isFinished: boolean,
    initialPrize: bigint,
    totalPrize: bigint,
    maxTicketsFromOneMember: bigint,
    tokensForOneTicket: bigint,
    winnersForLevel: bigint[],
    prizeForLevel: bigint[],
    totalTickets: bigint,
    members: string[],
    randomWord: bigint,
    winners: string[][]
  ] & {
    id: bigint;
    startTime: bigint;
    duration: bigint;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: bigint;
    totalPrize: bigint;
    maxTicketsFromOneMember: bigint;
    tokensForOneTicket: bigint;
    winnersForLevel: bigint[];
    prizeForLevel: bigint[];
    totalTickets: bigint;
    members: string[];
    randomWord: bigint;
    winners: string[][];
  };
}

export interface IRafflesInterface extends Interface {
  getFunction(
    nameOrSignature: "getRound" | "getUserRoundEntry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundEntry",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundEntry",
    data: BytesLike
  ): Result;
}

export interface IRaffles extends BaseContract {
  connect(runner?: ContractRunner | null): IRaffles;
  waitForDeployment(): Promise<this>;

  interface: IRafflesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRound: TypedContractMethod<
    [id: BigNumberish],
    [IRaffles.RoundStructOutput],
    "view"
  >;

  getUserRoundEntry: TypedContractMethod<
    [user: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IRaffles.RoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRoundEntry"
  ): TypedContractMethod<
    [user: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}

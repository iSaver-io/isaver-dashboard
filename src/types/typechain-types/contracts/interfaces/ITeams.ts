/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITeams {
  export type TeamPlanStruct = {
    teamPlanId: BigNumberish;
    subscriptionCost: BigNumberish;
    reward: BigNumberish;
    stakingThreshold: BigNumberish;
    teamSize: BigNumberish;
    stakingPlanId: BigNumberish;
    isActive: boolean;
  };

  export type TeamPlanStructOutput = [
    teamPlanId: bigint,
    subscriptionCost: bigint,
    reward: bigint,
    stakingThreshold: bigint,
    teamSize: bigint,
    stakingPlanId: bigint,
    isActive: boolean
  ] & {
    teamPlanId: bigint;
    subscriptionCost: bigint;
    reward: bigint;
    stakingThreshold: bigint;
    teamSize: bigint;
    stakingPlanId: bigint;
    isActive: boolean;
  };

  export type TeamStruct = {
    subscription: BigNumberish;
    teamsFilled: BigNumberish;
  };

  export type TeamStructOutput = [subscription: bigint, teamsFilled: bigint] & {
    subscription: bigint;
    teamsFilled: bigint;
  };
}

export interface ITeamsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getActivePlans"
      | "getPlan"
      | "getPlans"
      | "getSufficientPlanIdByStakingAmount"
      | "getUserSubscription"
      | "getUserTeamMembers"
      | "hasAnySubscription"
      | "subscribe"
      | "tryToAddMember"
      | "userHasPlanSubscription"
      | "userHasSufficientStaking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActivePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPlans", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTeamMembers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToAddMember",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPlanSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSufficientStaking",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActivePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTeamMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryToAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPlanSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSufficientStaking",
    data: BytesLike
  ): Result;
}

export interface ITeams extends BaseContract {
  connect(runner?: ContractRunner | null): ITeams;
  waitForDeployment(): Promise<this>;

  interface: ITeamsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getActivePlans: TypedContractMethod<
    [],
    [ITeams.TeamPlanStructOutput[]],
    "view"
  >;

  getPlan: TypedContractMethod<
    [planId: BigNumberish],
    [ITeams.TeamPlanStructOutput],
    "view"
  >;

  getPlans: TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;

  getSufficientPlanIdByStakingAmount: TypedContractMethod<
    [stakingPlanId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getUserSubscription: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [ITeams.TeamStructOutput],
    "view"
  >;

  getUserTeamMembers: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [string[]],
    "view"
  >;

  hasAnySubscription: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  subscribe: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  tryToAddMember: TypedContractMethod<
    [
      stakingPlanId: BigNumberish,
      user: AddressLike,
      member: AddressLike,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  userHasPlanSubscription: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  userHasSufficientStaking: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getActivePlans"
  ): TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlan"
  ): TypedContractMethod<
    [planId: BigNumberish],
    [ITeams.TeamPlanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlans"
  ): TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getSufficientPlanIdByStakingAmount"
  ): TypedContractMethod<
    [stakingPlanId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserSubscription"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [ITeams.TeamStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTeamMembers"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAnySubscription"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tryToAddMember"
  ): TypedContractMethod<
    [
      stakingPlanId: BigNumberish,
      user: AddressLike,
      member: AddressLike,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userHasPlanSubscription"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userHasSufficientStaking"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  filters: {};
}

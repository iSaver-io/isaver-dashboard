/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IContractManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAvatarsAddress"
      | "getBirthdayPrizesPool"
      | "getPowersAddress"
      | "getRafflesAddress"
      | "getReferralManagerAddress"
      | "getSavTokenAddress"
      | "getSavrTokenAddress"
      | "getStakingAddress"
      | "getTeamsAddress"
      | "getTicketAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAvatarsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBirthdayPrizesPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowersAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRafflesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSavTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSavrTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAvatarsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBirthdayPrizesPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRafflesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavrTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketAddress",
    data: BytesLike
  ): Result;
}

export interface IContractManager extends BaseContract {
  connect(runner?: ContractRunner | null): IContractManager;
  waitForDeployment(): Promise<this>;

  interface: IContractManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAvatarsAddress: TypedContractMethod<[], [string], "view">;

  getBirthdayPrizesPool: TypedContractMethod<[], [string], "view">;

  getPowersAddress: TypedContractMethod<[], [string], "view">;

  getRafflesAddress: TypedContractMethod<[], [string], "view">;

  getReferralManagerAddress: TypedContractMethod<[], [string], "view">;

  getSavTokenAddress: TypedContractMethod<[], [string], "view">;

  getSavrTokenAddress: TypedContractMethod<[], [string], "view">;

  getStakingAddress: TypedContractMethod<[], [string], "view">;

  getTeamsAddress: TypedContractMethod<[], [string], "view">;

  getTicketAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAvatarsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBirthdayPrizesPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPowersAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRafflesAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReferralManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSavTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSavrTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStakingAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTeamsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTicketAddress"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}

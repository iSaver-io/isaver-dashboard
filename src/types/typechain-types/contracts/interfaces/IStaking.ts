/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStaking {
  export type UserStakingInfoStruct = {
    totalClaimed: BigNumberish;
    currentSavTokenStaked: BigNumberish;
    currentSavrTokenStaked: BigNumberish;
    isSubscribed: boolean;
    subscribedTill: BigNumberish;
  };

  export type UserStakingInfoStructOutput = [
    totalClaimed: bigint,
    currentSavTokenStaked: bigint,
    currentSavrTokenStaked: bigint,
    isSubscribed: boolean,
    subscribedTill: bigint
  ] & {
    totalClaimed: bigint;
    currentSavTokenStaked: bigint;
    currentSavrTokenStaked: bigint;
    isSubscribed: boolean;
    subscribedTill: bigint;
  };

  export type StakeStruct = {
    amount: BigNumberish;
    timeStart: BigNumberish;
    timeEnd: BigNumberish;
    apr: BigNumberish;
    profit: BigNumberish;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };

  export type StakeStructOutput = [
    amount: bigint,
    timeStart: bigint,
    timeEnd: bigint,
    apr: bigint,
    profit: bigint,
    isClaimed: boolean,
    isSAVRToken: boolean
  ] & {
    amount: bigint;
    timeStart: bigint;
    timeEnd: bigint;
    apr: bigint;
    profit: bigint;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };
}

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "getAvailableStakeReward"
      | "getUserPlanInfo"
      | "getUserStakes"
      | "hasAnySubscription"
      | "hasSubscription"
      | "subscribe"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStakeReward",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlanInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getAvailableStakeReward: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike, stakeId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserPlanInfo: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput],
    "view"
  >;

  getUserStakes: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeStructOutput[]],
    "view"
  >;

  hasAnySubscription: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  hasSubscription: TypedContractMethod<
    [planId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  subscribe: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [planId: BigNumberish, stakeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableStakeReward"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike, stakeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPlanInfo"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStakes"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAnySubscription"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasSubscription"
  ): TypedContractMethod<
    [planId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [planId: BigNumberish, stakeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}

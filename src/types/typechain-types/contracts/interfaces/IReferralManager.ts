/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IReferralManager {
  export type AddDividendsParamsStruct = {
    user: AddressLike;
    reward: BigNumberish;
    referral: AddressLike;
    level: BigNumberish;
    depositAmount: BigNumberish;
    stakingPlanId: BigNumberish;
    reason: BigNumberish;
  };

  export type AddDividendsParamsStructOutput = [
    user: string,
    reward: bigint,
    referral: string,
    level: bigint,
    depositAmount: bigint,
    stakingPlanId: bigint,
    reason: bigint
  ] & {
    user: string;
    reward: bigint;
    referral: string;
    level: bigint;
    depositAmount: bigint;
    stakingPlanId: bigint;
    reason: bigint;
  };

  export type ReferralStruct = {
    referralAddress: AddressLike;
    level: BigNumberish;
    activationDate: BigNumberish;
    isReferralSubscriptionActive: boolean;
  };

  export type ReferralStructOutput = [
    referralAddress: string,
    level: bigint,
    activationDate: bigint,
    isReferralSubscriptionActive: boolean
  ] & {
    referralAddress: string;
    level: bigint;
    activationDate: bigint;
    isReferralSubscriptionActive: boolean;
  };
}

export interface IReferralManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addUserDividends"
      | "calculateRefReward"
      | "getReferralLevels"
      | "getUserReferralsByLevel"
      | "getUserReferrer"
      | "setUserReferrer"
      | "userHasSubscription"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUserDividends",
    values: [IReferralManager.AddDividendsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralsByLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserReferrer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSubscription",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUserDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralsByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSubscription",
    data: BytesLike
  ): Result;
}

export interface IReferralManager extends BaseContract {
  connect(runner?: ContractRunner | null): IReferralManager;
  waitForDeployment(): Promise<this>;

  interface: IReferralManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addUserDividends: TypedContractMethod<
    [params: IReferralManager.AddDividendsParamsStruct],
    [void],
    "nonpayable"
  >;

  calculateRefReward: TypedContractMethod<
    [amount: BigNumberish, level: BigNumberish],
    [bigint],
    "view"
  >;

  getReferralLevels: TypedContractMethod<[], [bigint], "view">;

  getUserReferralsByLevel: TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [IReferralManager.ReferralStructOutput[]],
    "view"
  >;

  getUserReferrer: TypedContractMethod<[user: AddressLike], [string], "view">;

  setUserReferrer: TypedContractMethod<
    [user: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  userHasSubscription: TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addUserDividends"
  ): TypedContractMethod<
    [params: IReferralManager.AddDividendsParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateRefReward"
  ): TypedContractMethod<
    [amount: BigNumberish, level: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralLevels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserReferralsByLevel"
  ): TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [IReferralManager.ReferralStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReferrer"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setUserReferrer"
  ): TypedContractMethod<
    [user: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userHasSubscription"
  ): TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [boolean],
    "view"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IReferralManager {
  export type AddDividendsParamsStruct = {
    user: string;
    reward: BigNumberish;
    referral: string;
    level: BigNumberish;
    depositAmount: BigNumberish;
    stakingPlanId: BigNumberish;
    reason: BigNumberish;
  };

  export type AddDividendsParamsStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    reward: BigNumber;
    referral: string;
    level: BigNumber;
    depositAmount: BigNumber;
    stakingPlanId: BigNumber;
    reason: BigNumber;
  };

  export type ReferralStruct = {
    referralAddress: string;
    level: BigNumberish;
    activationDate: BigNumberish;
    isReferralSubscriptionActive: boolean;
  };

  export type ReferralStructOutput = [string, BigNumber, BigNumber, boolean] & {
    referralAddress: string;
    level: BigNumber;
    activationDate: BigNumber;
    isReferralSubscriptionActive: boolean;
  };
}

export interface IReferralManagerInterface extends utils.Interface {
  functions: {
    "addUserDividends((address,uint256,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateRefReward(uint256,uint256)": FunctionFragment;
    "getSubscriptionReferralLevels()": FunctionFragment;
    "getTotalReferralLevels()": FunctionFragment;
    "getUserReferralsByLevel(address,uint256)": FunctionFragment;
    "getUserReferrer(address)": FunctionFragment;
    "renewPowerSubscriptionA(address)": FunctionFragment;
    "setUserReferrer(address,address)": FunctionFragment;
    "userHasActivatedPowerA(address)": FunctionFragment;
    "userHasActivePowerA(address)": FunctionFragment;
    "userHasSubscription(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUserDividends"
      | "calculateRefReward"
      | "getSubscriptionReferralLevels"
      | "getTotalReferralLevels"
      | "getUserReferralsByLevel"
      | "getUserReferrer"
      | "renewPowerSubscriptionA"
      | "setUserReferrer"
      | "userHasActivatedPowerA"
      | "userHasActivePowerA"
      | "userHasSubscription"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUserDividends",
    values: [IReferralManager.AddDividendsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReferralLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralsByLevel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferrer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewPowerSubscriptionA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserReferrer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasActivatedPowerA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasActivePowerA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSubscription",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUserDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReferralLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralsByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPowerSubscriptionA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasActivatedPowerA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasActivePowerA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSubscription",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IReferralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReferralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IReferralManager.ReferralStructOutput[]]>;

    getUserReferrer(user: string, overrides?: CallOverrides): Promise<[string]>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addUserDividends(
    params: IReferralManager.AddDividendsParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateRefReward(
    amount: BigNumberish,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

  getUserReferralsByLevel(
    userAddress: string,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IReferralManager.ReferralStructOutput[]>;

  getUserReferrer(user: string, overrides?: CallOverrides): Promise<string>;

  renewPowerSubscriptionA(
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUserReferrer(
    user: string,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userHasActivatedPowerA(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasActivePowerA(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasSubscription(
    user: string,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IReferralManager.ReferralStructOutput[]>;

    getUserReferrer(user: string, overrides?: CallOverrides): Promise<string>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalReferralLevels(overrides?: CallOverrides): Promise<BigNumber>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReferrer(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUserDividends(
      params: IReferralManager.AddDividendsParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateRefReward(
      amount: BigNumberish,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionReferralLevels(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalReferralLevels(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReferralsByLevel(
      userAddress: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReferrer(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewPowerSubscriptionA(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUserReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userHasActivatedPowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasActivePowerA(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasSubscription(
      user: string,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

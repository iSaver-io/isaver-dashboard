/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IStaking {
  export type StakingPlanStruct = {
    stakingPlanId: BigNumberish;
    isActive: boolean;
    isSuperPowered: boolean;
    subscriptionCost: BigNumberish;
    subscriptionDuration: BigNumberish;
    stakingDuration: BigNumberish;
    apr: BigNumberish;
    totalStakesSavTokenNo: BigNumberish;
    totalStakesSavrTokenNo: BigNumberish;
    totalStakedSavToken: BigNumberish;
    totalStakedSavrToken: BigNumberish;
    currentSavTokenLocked: BigNumberish;
    currentSavrTokenLocked: BigNumberish;
    totalClaimed: BigNumberish;
  };

  export type StakingPlanStructOutput = [
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakingPlanId: BigNumber;
    isActive: boolean;
    isSuperPowered: boolean;
    subscriptionCost: BigNumber;
    subscriptionDuration: BigNumber;
    stakingDuration: BigNumber;
    apr: BigNumber;
    totalStakesSavTokenNo: BigNumber;
    totalStakesSavrTokenNo: BigNumber;
    totalStakedSavToken: BigNumber;
    totalStakedSavrToken: BigNumber;
    currentSavTokenLocked: BigNumber;
    currentSavrTokenLocked: BigNumber;
    totalClaimed: BigNumber;
  };

  export type SuperStakingPlanStruct = {
    stakingPlanId: BigNumberish;
    isActive: boolean;
    totalStakesNo: BigNumberish;
    totalStaked: BigNumberish;
    currentLocked: BigNumberish;
    totalClaimed: BigNumberish;
  };

  export type SuperStakingPlanStructOutput = [
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakingPlanId: BigNumber;
    isActive: boolean;
    totalStakesNo: BigNumber;
    totalStaked: BigNumber;
    currentLocked: BigNumber;
    totalClaimed: BigNumber;
  };

  export type AprChangeStruct = { time: BigNumberish; apr: BigNumberish };

  export type AprChangeStructOutput = [BigNumber, BigNumber] & {
    time: BigNumber;
    apr: BigNumber;
  };

  export type SuperStakeStruct = {
    profit: BigNumberish;
    deposit: BigNumberish;
    lastTimestamp: BigNumberish;
    totalClaimed: BigNumberish;
    totalDeposited: BigNumberish;
  };

  export type SuperStakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    profit: BigNumber;
    deposit: BigNumber;
    lastTimestamp: BigNumber;
    totalClaimed: BigNumber;
    totalDeposited: BigNumber;
  };

  export type SuperStakingPlanWithAprAndStakeStruct = {
    plan: IStaking.SuperStakingPlanStruct;
    apr: IStaking.AprChangeStruct;
    stake: IStaking.SuperStakeStruct;
  };

  export type SuperStakingPlanWithAprAndStakeStructOutput = [
    IStaking.SuperStakingPlanStructOutput,
    IStaking.AprChangeStructOutput,
    IStaking.SuperStakeStructOutput
  ] & {
    plan: IStaking.SuperStakingPlanStructOutput;
    apr: IStaking.AprChangeStructOutput;
    stake: IStaking.SuperStakeStructOutput;
  };

  export type UserStakingInfoStruct = {
    totalClaimed: BigNumberish;
    currentSavTokenStaked: BigNumberish;
    currentSavrTokenStaked: BigNumberish;
    isSubscribed: boolean;
    subscribedTill: BigNumberish;
  };

  export type UserStakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalClaimed: BigNumber;
    currentSavTokenStaked: BigNumber;
    currentSavrTokenStaked: BigNumber;
    isSubscribed: boolean;
    subscribedTill: BigNumber;
  };

  export type StakeStruct = {
    amount: BigNumberish;
    timeStart: BigNumberish;
    timeEnd: BigNumberish;
    apr: BigNumberish;
    profit: BigNumberish;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    timeStart: BigNumber;
    timeEnd: BigNumber;
    apr: BigNumber;
    profit: BigNumber;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };

  export type StakeWithRewardsInfoStruct = {
    stake: IStaking.StakeStruct;
    reward: BigNumberish;
  };

  export type StakeWithRewardsInfoStructOutput = [
    IStaking.StakeStructOutput,
    BigNumber
  ] & { stake: IStaking.StakeStructOutput; reward: BigNumber };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "BASE_POINTS_DIVIDER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MIN_STAKE_LIMIT()": FunctionFragment;
    "TIME_STEP()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "addStakingPlan(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "addSuperStakingPlan(uint256)": FunctionFragment;
    "calculateStakeProfit(uint256,uint256)": FunctionFragment;
    "claimSuperPlan(uint256)": FunctionFragment;
    "deposit(uint256,uint256,bool,address)": FunctionFragment;
    "depositSuperPlan(uint256,uint256)": FunctionFragment;
    "extraAprPowerC()": FunctionFragment;
    "extract(address,uint256,bool)": FunctionFragment;
    "getAvailableStakeReward(uint256,address,uint256)": FunctionFragment;
    "getAvailableSuperStakeReward(uint256,address)": FunctionFragment;
    "getAvailableTokens(bool)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakingPlans()": FunctionFragment;
    "getSuperStakingPlansForUser(address)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getUserPlanInfo(uint256,address)": FunctionFragment;
    "getUserPlansInfo(address)": FunctionFragment;
    "getUserStakes(uint256,address)": FunctionFragment;
    "getUserStakesWithRewards(uint256,address)": FunctionFragment;
    "getUserSuperPlanInfo(uint256,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSubscription(uint256,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renewPowerSubscriptionB(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stakingPlans(uint256)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "superStakingPlans(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalLockedTokens()": FunctionFragment;
    "updateExtraAprPowerC(uint256)": FunctionFragment;
    "updateMinStakeLimit(uint256)": FunctionFragment;
    "updatePlanAPR(uint256,uint256)": FunctionFragment;
    "updatePlanActivity(uint256,bool)": FunctionFragment;
    "updatePlanDurationDays(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionCost(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionPeriod(uint256,uint256)": FunctionFragment;
    "updateSuperPlanAPR(uint256,uint256)": FunctionFragment;
    "updateSuperPlanActivity(uint256,bool)": FunctionFragment;
    "updateTimeStep(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAllCompleted(uint256)": FunctionFragment;
    "withdrawSuperPlan(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_POINTS_DIVIDER"
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_STAKE_LIMIT"
      | "TIME_STEP"
      | "UPGRADER_ROLE"
      | "addStakingPlan"
      | "addSuperStakingPlan"
      | "calculateStakeProfit"
      | "claimSuperPlan"
      | "deposit"
      | "depositSuperPlan"
      | "extraAprPowerC"
      | "extract"
      | "getAvailableStakeReward"
      | "getAvailableSuperStakeReward"
      | "getAvailableTokens"
      | "getRoleAdmin"
      | "getStakingPlans"
      | "getSuperStakingPlansForUser"
      | "getTimestamp"
      | "getUserPlanInfo"
      | "getUserPlansInfo"
      | "getUserStakes"
      | "getUserStakesWithRewards"
      | "getUserSuperPlanInfo"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "hasSubscription"
      | "initialize"
      | "proxiableUUID"
      | "renewPowerSubscriptionB"
      | "renounceRole"
      | "revokeRole"
      | "stakingPlans"
      | "subscribe"
      | "superStakingPlans"
      | "supportsInterface"
      | "totalLockedTokens"
      | "updateExtraAprPowerC"
      | "updateMinStakeLimit"
      | "updatePlanAPR"
      | "updatePlanActivity"
      | "updatePlanDurationDays"
      | "updatePlanSubscriptionCost"
      | "updatePlanSubscriptionPeriod"
      | "updateSuperPlanAPR"
      | "updateSuperPlanActivity"
      | "updateTimeStep"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawAllCompleted"
      | "withdrawSuperPlan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_POINTS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStakingPlan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addSuperStakingPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakeProfit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSuperPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSuperPlan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extraAprPowerC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extract",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStakeReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSuperStakeReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokens",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperStakingPlansForUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlanInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlansInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakesWithRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSuperPlanInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewPowerSubscriptionB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "superStakingPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExtraAprPowerC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinStakeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanAPR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanDurationDays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperPlanAPR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperPlanActivity",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSuperPlan",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_POINTS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStakingPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSuperStakingPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSuperPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSuperPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraAprPowerC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSuperStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuperStakingPlansForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlansInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakesWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSuperPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPowerSubscriptionB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "superStakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExtraAprPowerC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanDurationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperPlanAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperPlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSuperPlan",
    data: BytesLike
  ): Result;

  events: {
    "ActivityChanged(uint256,bool)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Claimed(address,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "StakedSuperPlan(address,uint256,uint256,uint256)": EventFragment;
    "StakingPlanCreated(uint256,uint256,uint256)": EventFragment;
    "Subscribed(address,uint256)": EventFragment;
    "SuperAprUpdated(uint256,uint256,uint256)": EventFragment;
    "SuperClaimed(address,uint256,uint256,uint256)": EventFragment;
    "SuperPlanActivityChanged(uint256,bool)": EventFragment;
    "SuperStakingPlanCreated(uint256,uint256)": EventFragment;
    "SuperWithdrawn(address,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedSuperPlan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperAprUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperPlanActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperStakingPlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface ActivityChangedEventObject {
  stakingPlanId: BigNumber;
  isActive: boolean;
}
export type ActivityChangedEvent = TypedEvent<
  [BigNumber, boolean],
  ActivityChangedEventObject
>;

export type ActivityChangedEventFilter = TypedEventFilter<ActivityChangedEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ClaimedEventObject {
  user: string;
  stakingPlanId: BigNumber;
  stakeIndex: BigNumber;
  amount: BigNumber;
  isSAVRToken: boolean;
  timestamp: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakedEventObject {
  user: string;
  stakingPlanId: BigNumber;
  stakeIndex: BigNumber;
  amount: BigNumber;
  profit: BigNumber;
  isSAVRToken: boolean;
  timestamp: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StakedSuperPlanEventObject {
  user: string;
  superStakingPlanId: BigNumber;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type StakedSuperPlanEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StakedSuperPlanEventObject
>;

export type StakedSuperPlanEventFilter = TypedEventFilter<StakedSuperPlanEvent>;

export interface StakingPlanCreatedEventObject {
  stakingPlanId: BigNumber;
  duration: BigNumber;
  apr: BigNumber;
}
export type StakingPlanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  StakingPlanCreatedEventObject
>;

export type StakingPlanCreatedEventFilter =
  TypedEventFilter<StakingPlanCreatedEvent>;

export interface SubscribedEventObject {
  user: string;
  stakingPlanId: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SuperAprUpdatedEventObject {
  superPlanId: BigNumber;
  newApr: BigNumber;
  timestamp: BigNumber;
}
export type SuperAprUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SuperAprUpdatedEventObject
>;

export type SuperAprUpdatedEventFilter = TypedEventFilter<SuperAprUpdatedEvent>;

export interface SuperClaimedEventObject {
  user: string;
  superStakingPlanId: BigNumber;
  profit: BigNumber;
  timestamp: BigNumber;
}
export type SuperClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SuperClaimedEventObject
>;

export type SuperClaimedEventFilter = TypedEventFilter<SuperClaimedEvent>;

export interface SuperPlanActivityChangedEventObject {
  superStakingPlanId: BigNumber;
  isActive: boolean;
}
export type SuperPlanActivityChangedEvent = TypedEvent<
  [BigNumber, boolean],
  SuperPlanActivityChangedEventObject
>;

export type SuperPlanActivityChangedEventFilter =
  TypedEventFilter<SuperPlanActivityChangedEvent>;

export interface SuperStakingPlanCreatedEventObject {
  superStakingPlanId: BigNumber;
  apr: BigNumber;
}
export type SuperStakingPlanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SuperStakingPlanCreatedEventObject
>;

export type SuperStakingPlanCreatedEventFilter =
  TypedEventFilter<SuperStakingPlanCreatedEvent>;

export interface SuperWithdrawnEventObject {
  user: string;
  superStakingPlanId: BigNumber;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type SuperWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SuperWithdrawnEventObject
>;

export type SuperWithdrawnEventFilter = TypedEventFilter<SuperWithdrawnEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addStakingPlan(
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish,
      isSuperPowered: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addSuperStakingPlan(
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateStakeProfit(
      planId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositSuperPlan(
      superPlanId: BigNumberish,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extraAprPowerC(overrides?: CallOverrides): Promise<[BigNumber]>;

    extract(
      recipient: string,
      amount: BigNumberish,
      isSAVRToken: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAvailableStakeReward(
      planId: BigNumberish,
      userAddress: string,
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableSuperStakeReward(
      superPlanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableTokens(
      isSAVRToken: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<[IStaking.StakingPlanStructOutput[]]>;

    getSuperStakingPlansForUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.SuperStakingPlanWithAprAndStakeStructOutput[]]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPlanInfo(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.UserStakingInfoStructOutput]>;

    getUserPlansInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.UserStakingInfoStructOutput[]]>;

    getUserStakes(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.StakeStructOutput[]]>;

    getUserStakesWithRewards(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.StakeWithRewardsInfoStructOutput[]]>;

    getUserSuperPlanInfo(
      superPlanId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.SuperStakeStructOutput]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSubscription(
      planId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renewPowerSubscriptionB(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingPlanId: BigNumber;
        isActive: boolean;
        isSuperPowered: boolean;
        subscriptionCost: BigNumber;
        subscriptionDuration: BigNumber;
        stakingDuration: BigNumber;
        apr: BigNumber;
        totalStakesSavTokenNo: BigNumber;
        totalStakesSavrTokenNo: BigNumber;
        totalStakedSavToken: BigNumber;
        totalStakedSavrToken: BigNumber;
        currentSavTokenLocked: BigNumber;
        currentSavrTokenLocked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    superStakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingPlanId: BigNumber;
        isActive: boolean;
        totalStakesNo: BigNumber;
        totalStaked: BigNumber;
        currentLocked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalLockedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateExtraAprPowerC(
      _extraApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMinStakeLimit(
      minLimit_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanAPR(
      planId: BigNumberish,
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanDurationDays(
      planId: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionPeriod(
      planId: BigNumberish,
      subscriptionDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSuperPlanAPR(
      superPlanId: BigNumberish,
      newApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSuperPlanActivity(
      superPlanId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTimeStep(
      step_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      planId: BigNumberish,
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllCompleted(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  addStakingPlan(
    subscriptionCost: BigNumberish,
    subscriptionDuration: BigNumberish,
    stakingDuration: BigNumberish,
    apr: BigNumberish,
    isSuperPowered: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addSuperStakingPlan(
    apr: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateStakeProfit(
    planId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimSuperPlan(
    superPlanId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    planId: BigNumberish,
    depositAmount: BigNumberish,
    isSAVRToken: boolean,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositSuperPlan(
    superPlanId: BigNumberish,
    depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extraAprPowerC(overrides?: CallOverrides): Promise<BigNumber>;

  extract(
    recipient: string,
    amount: BigNumberish,
    isSAVRToken: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAvailableStakeReward(
    planId: BigNumberish,
    userAddress: string,
    stakeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableSuperStakeReward(
    superPlanId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableTokens(
    isSAVRToken: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getStakingPlans(
    overrides?: CallOverrides
  ): Promise<IStaking.StakingPlanStructOutput[]>;

  getSuperStakingPlansForUser(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.SuperStakingPlanWithAprAndStakeStructOutput[]>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPlanInfo(
    planId: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.UserStakingInfoStructOutput>;

  getUserPlansInfo(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.UserStakingInfoStructOutput[]>;

  getUserStakes(
    planId: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeStructOutput[]>;

  getUserStakesWithRewards(
    planId: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeWithRewardsInfoStructOutput[]>;

  getUserSuperPlanInfo(
    superPlanId: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<IStaking.SuperStakeStructOutput>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasAnySubscription(user: string, overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSubscription(
    planId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    contractManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renewPowerSubscriptionB(
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakingPlans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakingPlanId: BigNumber;
      isActive: boolean;
      isSuperPowered: boolean;
      subscriptionCost: BigNumber;
      subscriptionDuration: BigNumber;
      stakingDuration: BigNumber;
      apr: BigNumber;
      totalStakesSavTokenNo: BigNumber;
      totalStakesSavrTokenNo: BigNumber;
      totalStakedSavToken: BigNumber;
      totalStakedSavrToken: BigNumber;
      currentSavTokenLocked: BigNumber;
      currentSavrTokenLocked: BigNumber;
      totalClaimed: BigNumber;
    }
  >;

  subscribe(
    planId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  superStakingPlans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakingPlanId: BigNumber;
      isActive: boolean;
      totalStakesNo: BigNumber;
      totalStaked: BigNumber;
      currentLocked: BigNumber;
      totalClaimed: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  updateExtraAprPowerC(
    _extraApr: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMinStakeLimit(
    minLimit_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanAPR(
    planId: BigNumberish,
    apr: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanActivity(
    planId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanDurationDays(
    planId: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionCost(
    planId: BigNumberish,
    cost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionPeriod(
    planId: BigNumberish,
    subscriptionDuration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSuperPlanAPR(
    superPlanId: BigNumberish,
    newApr: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSuperPlanActivity(
    superPlanId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTimeStep(
    step_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    planId: BigNumberish,
    stakeId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllCompleted(
    planId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawSuperPlan(
    superPlanId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    addStakingPlan(
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish,
      isSuperPowered: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addSuperStakingPlan(
      apr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateStakeProfit(
      planId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSuperPlan(
      superPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositSuperPlan(
      superPlanId: BigNumberish,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extraAprPowerC(overrides?: CallOverrides): Promise<BigNumber>;

    extract(
      recipient: string,
      amount: BigNumberish,
      isSAVRToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableStakeReward(
      planId: BigNumberish,
      userAddress: string,
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableSuperStakeReward(
      superPlanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableTokens(
      isSAVRToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<IStaking.StakingPlanStructOutput[]>;

    getSuperStakingPlansForUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.SuperStakingPlanWithAprAndStakeStructOutput[]>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPlanInfo(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.UserStakingInfoStructOutput>;

    getUserPlansInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.UserStakingInfoStructOutput[]>;

    getUserStakes(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeStructOutput[]>;

    getUserStakesWithRewards(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeWithRewardsInfoStructOutput[]>;

    getUserSuperPlanInfo(
      superPlanId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<IStaking.SuperStakeStructOutput>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSubscription(
      planId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      contractManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renewPowerSubscriptionB(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingPlanId: BigNumber;
        isActive: boolean;
        isSuperPowered: boolean;
        subscriptionCost: BigNumber;
        subscriptionDuration: BigNumber;
        stakingDuration: BigNumber;
        apr: BigNumber;
        totalStakesSavTokenNo: BigNumber;
        totalStakesSavrTokenNo: BigNumber;
        totalStakedSavToken: BigNumber;
        totalStakedSavrToken: BigNumber;
        currentSavTokenLocked: BigNumber;
        currentSavrTokenLocked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    subscribe(planId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    superStakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingPlanId: BigNumber;
        isActive: boolean;
        totalStakesNo: BigNumber;
        totalStaked: BigNumber;
        currentLocked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    updateExtraAprPowerC(
      _extraApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinStakeLimit(
      minLimit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanAPR(
      planId: BigNumberish,
      apr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanDurationDays(
      planId: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionPeriod(
      planId: BigNumberish,
      subscriptionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSuperPlanAPR(
      superPlanId: BigNumberish,
      newApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSuperPlanActivity(
      superPlanId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTimeStep(
      step_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      planId: BigNumberish,
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllCompleted(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSuperPlan(
      superPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivityChanged(uint256,bool)"(
      stakingPlanId?: BigNumberish | null,
      isActive?: null
    ): ActivityChangedEventFilter;
    ActivityChanged(
      stakingPlanId?: BigNumberish | null,
      isActive?: null
    ): ActivityChangedEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Claimed(address,uint256,uint256,uint256,bool,uint256)"(
      user?: string | null,
      stakingPlanId?: BigNumberish | null,
      stakeIndex?: BigNumberish | null,
      amount?: null,
      isSAVRToken?: null,
      timestamp?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: string | null,
      stakingPlanId?: BigNumberish | null,
      stakeIndex?: BigNumberish | null,
      amount?: null,
      isSAVRToken?: null,
      timestamp?: null
    ): ClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Staked(address,uint256,uint256,uint256,uint256,bool,uint256)"(
      user?: string | null,
      stakingPlanId?: BigNumberish | null,
      stakeIndex?: BigNumberish | null,
      amount?: null,
      profit?: null,
      isSAVRToken?: null,
      timestamp?: null
    ): StakedEventFilter;
    Staked(
      user?: string | null,
      stakingPlanId?: BigNumberish | null,
      stakeIndex?: BigNumberish | null,
      amount?: null,
      profit?: null,
      isSAVRToken?: null,
      timestamp?: null
    ): StakedEventFilter;

    "StakedSuperPlan(address,uint256,uint256,uint256)"(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      amount?: null,
      timestamp?: null
    ): StakedSuperPlanEventFilter;
    StakedSuperPlan(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      amount?: null,
      timestamp?: null
    ): StakedSuperPlanEventFilter;

    "StakingPlanCreated(uint256,uint256,uint256)"(
      stakingPlanId?: BigNumberish | null,
      duration?: null,
      apr?: null
    ): StakingPlanCreatedEventFilter;
    StakingPlanCreated(
      stakingPlanId?: BigNumberish | null,
      duration?: null,
      apr?: null
    ): StakingPlanCreatedEventFilter;

    "Subscribed(address,uint256)"(
      user?: string | null,
      stakingPlanId?: BigNumberish | null
    ): SubscribedEventFilter;
    Subscribed(
      user?: string | null,
      stakingPlanId?: BigNumberish | null
    ): SubscribedEventFilter;

    "SuperAprUpdated(uint256,uint256,uint256)"(
      superPlanId?: BigNumberish | null,
      newApr?: null,
      timestamp?: null
    ): SuperAprUpdatedEventFilter;
    SuperAprUpdated(
      superPlanId?: BigNumberish | null,
      newApr?: null,
      timestamp?: null
    ): SuperAprUpdatedEventFilter;

    "SuperClaimed(address,uint256,uint256,uint256)"(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      profit?: null,
      timestamp?: null
    ): SuperClaimedEventFilter;
    SuperClaimed(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      profit?: null,
      timestamp?: null
    ): SuperClaimedEventFilter;

    "SuperPlanActivityChanged(uint256,bool)"(
      superStakingPlanId?: BigNumberish | null,
      isActive?: null
    ): SuperPlanActivityChangedEventFilter;
    SuperPlanActivityChanged(
      superStakingPlanId?: BigNumberish | null,
      isActive?: null
    ): SuperPlanActivityChangedEventFilter;

    "SuperStakingPlanCreated(uint256,uint256)"(
      superStakingPlanId?: BigNumberish | null,
      apr?: null
    ): SuperStakingPlanCreatedEventFilter;
    SuperStakingPlanCreated(
      superStakingPlanId?: BigNumberish | null,
      apr?: null
    ): SuperStakingPlanCreatedEventFilter;

    "SuperWithdrawn(address,uint256,uint256,uint256)"(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      amount?: null,
      timestamp?: null
    ): SuperWithdrawnEventFilter;
    SuperWithdrawn(
      user?: string | null,
      superStakingPlanId?: BigNumberish | null,
      amount?: null,
      timestamp?: null
    ): SuperWithdrawnEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addStakingPlan(
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish,
      isSuperPowered: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addSuperStakingPlan(
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateStakeProfit(
      planId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositSuperPlan(
      superPlanId: BigNumberish,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extraAprPowerC(overrides?: CallOverrides): Promise<BigNumber>;

    extract(
      recipient: string,
      amount: BigNumberish,
      isSAVRToken: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAvailableStakeReward(
      planId: BigNumberish,
      userAddress: string,
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableSuperStakeReward(
      superPlanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableTokens(
      isSAVRToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getSuperStakingPlansForUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPlanInfo(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPlansInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakes(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakesWithRewards(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSuperPlanInfo(
      superPlanId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSubscription(
      planId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renewPowerSubscriptionB(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    superStakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    updateExtraAprPowerC(
      _extraApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMinStakeLimit(
      minLimit_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanAPR(
      planId: BigNumberish,
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanDurationDays(
      planId: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanSubscriptionPeriod(
      planId: BigNumberish,
      subscriptionDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSuperPlanAPR(
      superPlanId: BigNumberish,
      newApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSuperPlanActivity(
      superPlanId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTimeStep(
      step_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      planId: BigNumberish,
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllCompleted(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_POINTS_DIVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStakingPlan(
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish,
      isSuperPowered: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addSuperStakingPlan(
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateStakeProfit(
      planId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositSuperPlan(
      superPlanId: BigNumberish,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extraAprPowerC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extract(
      recipient: string,
      amount: BigNumberish,
      isSAVRToken: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAvailableStakeReward(
      planId: BigNumberish,
      userAddress: string,
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableSuperStakeReward(
      superPlanId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableTokens(
      isSAVRToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSuperStakingPlansForUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserPlanInfo(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPlansInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakes(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakesWithRewards(
      planId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSuperPlanInfo(
      superPlanId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSubscription(
      planId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewPowerSubscriptionB(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    superStakingPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLockedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateExtraAprPowerC(
      _extraApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMinStakeLimit(
      minLimit_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanAPR(
      planId: BigNumberish,
      apr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanDurationDays(
      planId: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionPeriod(
      planId: BigNumberish,
      subscriptionDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSuperPlanAPR(
      superPlanId: BigNumberish,
      newApr: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSuperPlanActivity(
      superPlanId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTimeStep(
      step_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      planId: BigNumberish,
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllCompleted(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawSuperPlan(
      superPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

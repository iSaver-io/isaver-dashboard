/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IStaking {
  export type StakingPlanStruct = {
    stakingPlanId: BigNumberish;
    isActive: boolean;
    subscriptionCost: BigNumberish;
    subscriptionDuration: BigNumberish;
    stakingDuration: BigNumberish;
    apr: BigNumberish;
    totalStakesSavTokenNo: BigNumberish;
    totalStakesSavrTokenNo: BigNumberish;
    totalStakedSavToken: BigNumberish;
    totalStakedSavrToken: BigNumberish;
    currentSavTokenLocked: BigNumberish;
    currentSavrTokenLocked: BigNumberish;
    totalClaimed: BigNumberish;
  };

  export type StakingPlanStructOutput = [
    stakingPlanId: bigint,
    isActive: boolean,
    subscriptionCost: bigint,
    subscriptionDuration: bigint,
    stakingDuration: bigint,
    apr: bigint,
    totalStakesSavTokenNo: bigint,
    totalStakesSavrTokenNo: bigint,
    totalStakedSavToken: bigint,
    totalStakedSavrToken: bigint,
    currentSavTokenLocked: bigint,
    currentSavrTokenLocked: bigint,
    totalClaimed: bigint
  ] & {
    stakingPlanId: bigint;
    isActive: boolean;
    subscriptionCost: bigint;
    subscriptionDuration: bigint;
    stakingDuration: bigint;
    apr: bigint;
    totalStakesSavTokenNo: bigint;
    totalStakesSavrTokenNo: bigint;
    totalStakedSavToken: bigint;
    totalStakedSavrToken: bigint;
    currentSavTokenLocked: bigint;
    currentSavrTokenLocked: bigint;
    totalClaimed: bigint;
  };

  export type UserStakingInfoStruct = {
    totalClaimed: BigNumberish;
    currentSavTokenStaked: BigNumberish;
    currentSavrTokenStaked: BigNumberish;
    isSubscribed: boolean;
    subscribedTill: BigNumberish;
  };

  export type UserStakingInfoStructOutput = [
    totalClaimed: bigint,
    currentSavTokenStaked: bigint,
    currentSavrTokenStaked: bigint,
    isSubscribed: boolean,
    subscribedTill: bigint
  ] & {
    totalClaimed: bigint;
    currentSavTokenStaked: bigint;
    currentSavrTokenStaked: bigint;
    isSubscribed: boolean;
    subscribedTill: bigint;
  };

  export type StakeStruct = {
    amount: BigNumberish;
    timeStart: BigNumberish;
    timeEnd: BigNumberish;
    apr: BigNumberish;
    profit: BigNumberish;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };

  export type StakeStructOutput = [
    amount: bigint,
    timeStart: bigint,
    timeEnd: bigint,
    apr: bigint,
    profit: bigint,
    isClaimed: boolean,
    isSAVRToken: boolean
  ] & {
    amount: bigint;
    timeStart: bigint;
    timeEnd: bigint;
    apr: bigint;
    profit: bigint;
    isClaimed: boolean;
    isSAVRToken: boolean;
  };

  export type StakeWithRewardsInfoStruct = {
    stake: IStaking.StakeStruct;
    reward: BigNumberish;
  };

  export type StakeWithRewardsInfoStructOutput = [
    stake: IStaking.StakeStructOutput,
    reward: bigint
  ] & { stake: IStaking.StakeStructOutput; reward: bigint };
}

export interface StakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_POINTS_DIVIDER"
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_STAKE_LIMIT"
      | "TIME_STEP"
      | "UPGRADER_ROLE"
      | "addStakingPlan"
      | "calculateStakeProfit"
      | "deposit"
      | "getAvailableStakeReward"
      | "getAvailableTokens"
      | "getRoleAdmin"
      | "getStakingPlans"
      | "getTimestamp"
      | "getUserPlanInfo"
      | "getUserPlansInfo"
      | "getUserStakes"
      | "getUserStakesWithRewards"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "hasSubscription"
      | "initialize"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "shouldAddReferrerOnSavrTokenStake"
      | "stakingPlans"
      | "subscribe"
      | "supportsInterface"
      | "totalLockedTokens"
      | "updateMinStakeLimit"
      | "updatePlanAPR"
      | "updatePlanActivity"
      | "updatePlanDurationDays"
      | "updatePlanSubscriptionCost"
      | "updatePlanSubscriptionPeriod"
      | "updateShouldAddReferrerOnSavrTokenStake"
      | "updateTimeStep"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawAll"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivityChanged"
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Claimed"
      | "Initialized"
      | "LiquidityWithdrawnByAdmin"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Staked"
      | "StakingPlanCreated"
      | "Subscribed"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_POINTS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStakingPlan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakeProfit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStakeReward",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlanInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlansInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakesWithRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldAddReferrerOnSavrTokenStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinStakeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanAPR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanDurationDays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShouldAddReferrerOnSavrTokenStake",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_POINTS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStakingPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlansInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakesWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldAddReferrerOnSavrTokenStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanDurationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShouldAddReferrerOnSavrTokenStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace ActivityChangedEvent {
  export type InputTuple = [stakingPlanId: BigNumberish, isActive: boolean];
  export type OutputTuple = [stakingPlanId: bigint, isActive: boolean];
  export interface OutputObject {
    stakingPlanId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingPlanId: BigNumberish,
    stakeIndex: BigNumberish,
    amount: BigNumberish,
    isSAVRToken: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingPlanId: bigint,
    stakeIndex: bigint,
    amount: bigint,
    isSAVRToken: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingPlanId: bigint;
    stakeIndex: bigint;
    amount: bigint;
    isSAVRToken: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityWithdrawnByAdminEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingPlanId: BigNumberish,
    stakeIndex: BigNumberish,
    amount: BigNumberish,
    profit: BigNumberish,
    isSAVRToken: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingPlanId: bigint,
    stakeIndex: bigint,
    amount: bigint,
    profit: bigint,
    isSAVRToken: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingPlanId: bigint;
    stakeIndex: bigint;
    amount: bigint;
    profit: bigint;
    isSAVRToken: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingPlanCreatedEvent {
  export type InputTuple = [
    stakingPlanId: BigNumberish,
    duration: BigNumberish,
    apr: BigNumberish
  ];
  export type OutputTuple = [
    stakingPlanId: bigint,
    duration: bigint,
    apr: bigint
  ];
  export interface OutputObject {
    stakingPlanId: bigint;
    duration: bigint;
    apr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [user: AddressLike, stakingPlanId: BigNumberish];
  export type OutputTuple = [user: string, stakingPlanId: bigint];
  export interface OutputObject {
    user: string;
    stakingPlanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking extends BaseContract {
  connect(runner?: ContractRunner | null): Staking;
  waitForDeployment(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_POINTS_DIVIDER: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_STAKE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  TIME_STEP: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  addStakingPlan: TypedContractMethod<
    [
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calculateStakeProfit: TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getAvailableStakeReward: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike, stakeId: BigNumberish],
    [bigint],
    "view"
  >;

  getAvailableTokens: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStakingPlans: TypedContractMethod<
    [],
    [IStaking.StakingPlanStructOutput[]],
    "view"
  >;

  getTimestamp: TypedContractMethod<[], [bigint], "view">;

  getUserPlanInfo: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput],
    "view"
  >;

  getUserPlansInfo: TypedContractMethod<
    [userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput[]],
    "view"
  >;

  getUserStakes: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeStructOutput[]],
    "view"
  >;

  getUserStakesWithRewards: TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeWithRewardsInfoStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAnySubscription: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasSubscription: TypedContractMethod<
    [planId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  shouldAddReferrerOnSavrTokenStake: TypedContractMethod<[], [boolean], "view">;

  stakingPlans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        stakingPlanId: bigint;
        isActive: boolean;
        subscriptionCost: bigint;
        subscriptionDuration: bigint;
        stakingDuration: bigint;
        apr: bigint;
        totalStakesSavTokenNo: bigint;
        totalStakesSavrTokenNo: bigint;
        totalStakedSavToken: bigint;
        totalStakedSavrToken: bigint;
        currentSavTokenLocked: bigint;
        currentSavrTokenLocked: bigint;
        totalClaimed: bigint;
      }
    ],
    "view"
  >;

  subscribe: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalLockedTokens: TypedContractMethod<[], [bigint], "view">;

  updateMinStakeLimit: TypedContractMethod<
    [minLimit_: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanAPR: TypedContractMethod<
    [planId: BigNumberish, apr: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanActivity: TypedContractMethod<
    [planId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updatePlanDurationDays: TypedContractMethod<
    [planId: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanSubscriptionCost: TypedContractMethod<
    [planId: BigNumberish, cost: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanSubscriptionPeriod: TypedContractMethod<
    [planId: BigNumberish, subscriptionDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateShouldAddReferrerOnSavrTokenStake: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  updateTimeStep: TypedContractMethod<
    [step_: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [planId: BigNumberish, stakeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<
    [planId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_POINTS_DIVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIME_STEP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStakingPlan"
  ): TypedContractMethod<
    [
      subscriptionCost: BigNumberish,
      subscriptionDuration: BigNumberish,
      stakingDuration: BigNumberish,
      apr: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateStakeProfit"
  ): TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      planId: BigNumberish,
      depositAmount: BigNumberish,
      isSAVRToken: boolean,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableStakeReward"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike, stakeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStakingPlans"
  ): TypedContractMethod<[], [IStaking.StakingPlanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPlanInfo"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPlansInfo"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [IStaking.UserStakingInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStakes"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStakesWithRewards"
  ): TypedContractMethod<
    [planId: BigNumberish, userAddress: AddressLike],
    [IStaking.StakeWithRewardsInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAnySubscription"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSubscription"
  ): TypedContractMethod<
    [planId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldAddReferrerOnSavrTokenStake"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "stakingPlans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        stakingPlanId: bigint;
        isActive: boolean;
        subscriptionCost: bigint;
        subscriptionDuration: bigint;
        stakingDuration: bigint;
        apr: bigint;
        totalStakesSavTokenNo: bigint;
        totalStakesSavrTokenNo: bigint;
        totalStakedSavToken: bigint;
        totalStakedSavrToken: bigint;
        currentSavTokenLocked: bigint;
        currentSavrTokenLocked: bigint;
        totalClaimed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalLockedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateMinStakeLimit"
  ): TypedContractMethod<[minLimit_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlanAPR"
  ): TypedContractMethod<
    [planId: BigNumberish, apr: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanActivity"
  ): TypedContractMethod<
    [planId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanDurationDays"
  ): TypedContractMethod<
    [planId: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanSubscriptionCost"
  ): TypedContractMethod<
    [planId: BigNumberish, cost: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanSubscriptionPeriod"
  ): TypedContractMethod<
    [planId: BigNumberish, subscriptionDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateShouldAddReferrerOnSavrTokenStake"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTimeStep"
  ): TypedContractMethod<[step_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [planId: BigNumberish, stakeId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActivityChanged"
  ): TypedContractEvent<
    ActivityChangedEvent.InputTuple,
    ActivityChangedEvent.OutputTuple,
    ActivityChangedEvent.OutputObject
  >;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityWithdrawnByAdmin"
  ): TypedContractEvent<
    LiquidityWithdrawnByAdminEvent.InputTuple,
    LiquidityWithdrawnByAdminEvent.OutputTuple,
    LiquidityWithdrawnByAdminEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "StakingPlanCreated"
  ): TypedContractEvent<
    StakingPlanCreatedEvent.InputTuple,
    StakingPlanCreatedEvent.OutputTuple,
    StakingPlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "ActivityChanged(uint256,bool)": TypedContractEvent<
      ActivityChangedEvent.InputTuple,
      ActivityChangedEvent.OutputTuple,
      ActivityChangedEvent.OutputObject
    >;
    ActivityChanged: TypedContractEvent<
      ActivityChangedEvent.InputTuple,
      ActivityChangedEvent.OutputTuple,
      ActivityChangedEvent.OutputObject
    >;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Claimed(address,uint256,uint256,uint256,bool,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidityWithdrawnByAdmin(address,uint256)": TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;
    LiquidityWithdrawnByAdmin: TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256,uint256,uint256,bool,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "StakingPlanCreated(uint256,uint256,uint256)": TypedContractEvent<
      StakingPlanCreatedEvent.InputTuple,
      StakingPlanCreatedEvent.OutputTuple,
      StakingPlanCreatedEvent.OutputObject
    >;
    StakingPlanCreated: TypedContractEvent<
      StakingPlanCreatedEvent.InputTuple,
      StakingPlanCreatedEvent.OutputTuple,
      StakingPlanCreatedEvent.OutputObject
    >;

    "Subscribed(address,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

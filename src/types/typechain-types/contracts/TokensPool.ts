/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace TokensPool {
  export type PrizeStruct = {
    tokenAddress: string;
    isERC20: boolean;
    isERC721: boolean;
    isERC1155: boolean;
    amount: BigNumberish;
    tokenIds: BigNumberish[];
    remaining: BigNumberish;
  };

  export type PrizeStructOutput = [
    string,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber[],
    BigNumber
  ] & {
    tokenAddress: string;
    isERC20: boolean;
    isERC721: boolean;
    isERC1155: boolean;
    amount: BigNumber;
    tokenIds: BigNumber[];
    remaining: BigNumber;
  };
}

export interface TokensPoolInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "addPrizeToCategory(uint256,address,address,bool,bool,bool,uint256,uint256[],uint256)": FunctionFragment;
    "categoriesLength()": FunctionFragment;
    "createCategory(uint256)": FunctionFragment;
    "enablePrizeCalculationInOracleResponse()": FunctionFragment;
    "enableRequestRandomInOracle()": FunctionFragment;
    "getCategory(uint256)": FunctionFragment;
    "getCategoryPrize(uint256,uint256)": FunctionFragment;
    "getCategoryPrizes(uint256)": FunctionFragment;
    "getCategoryRemainingPrizes(uint256)": FunctionFragment;
    "getNonEmptyCategories()": FunctionFragment;
    "getPrizeFromOracleRandom()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTotalChance()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasActiveRequest(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint64,bytes32)": FunctionFragment;
    "isRequestFulfilled(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "prizeCategories(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "removePrizeInCategory(uint256,uint256,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestPrize(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "senderRequests(address,uint256)": FunctionFragment;
    "senderRequestsCount(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateCallbackGasLimit(uint32)": FunctionFragment;
    "updateCategoryChance(uint256,uint256)": FunctionFragment;
    "updateKeyHash(bytes32)": FunctionFragment;
    "updatePrizeCalculationInResponse(bool)": FunctionFragment;
    "updateRequestConfirmations(uint16)": FunctionFragment;
    "updateRequestRandomInOracle(bool)": FunctionFragment;
    "updateSubscriptionId(uint64)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "UPGRADER_ROLE"
      | "addPrizeToCategory"
      | "categoriesLength"
      | "createCategory"
      | "enablePrizeCalculationInOracleResponse"
      | "enableRequestRandomInOracle"
      | "getCategory"
      | "getCategoryPrize"
      | "getCategoryPrizes"
      | "getCategoryRemainingPrizes"
      | "getNonEmptyCategories"
      | "getPrizeFromOracleRandom"
      | "getRoleAdmin"
      | "getTotalChance"
      | "grantRole"
      | "hasActiveRequest"
      | "hasRole"
      | "initialize"
      | "isRequestFulfilled"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "prizeCategories"
      | "proxiableUUID"
      | "rawFulfillRandomWords"
      | "removePrizeInCategory"
      | "renounceRole"
      | "requestPrize"
      | "revokeRole"
      | "senderRequests"
      | "senderRequestsCount"
      | "supportsInterface"
      | "unpause"
      | "updateCallbackGasLimit"
      | "updateCategoryChance"
      | "updateKeyHash"
      | "updatePrizeCalculationInResponse"
      | "updateRequestConfirmations"
      | "updateRequestRandomInOracle"
      | "updateSubscriptionId"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPrizeToCategory",
    values: [
      BigNumberish,
      string,
      string,
      boolean,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "categoriesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePrizeCalculationInOracleResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRequestRandomInOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryPrize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryRemainingPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonEmptyCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeFromOracleRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestFulfilled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrizeInCategory",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "senderRequests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "senderRequestsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCategoryChance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrizeCalculationInResponse",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestRandomInOracle",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPrizeToCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoriesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePrizeCalculationInOracleResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRequestRandomInOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryRemainingPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonEmptyCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeFromOracleRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRequestFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrizeInCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "senderRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "senderRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCategoryChance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrizeCalculationInResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestRandomInOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OracleRequestFulfilled(address,uint256,uint256)": EventFragment;
    "OracleRequestSent(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PrizeCategoryCreated(uint256,uint256)": EventFragment;
    "PrizeCategoryUpdated(uint256,uint256)": EventFragment;
    "PrizeInCategoryAdded(uint256,uint256)": EventFragment;
    "PrizeInCategoryFinished(uint256)": EventFragment;
    "PrizeInCategoryWithdrawn(uint256,uint256,address,uint256)": EventFragment;
    "PrizeSent(address,address,bool,bool,bool,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeCategoryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeCategoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeInCategoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeInCategoryFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeInCategoryWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OracleRequestFulfilledEventObject {
  sender: string;
  requestId: BigNumber;
  randomWord: BigNumber;
}
export type OracleRequestFulfilledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OracleRequestFulfilledEventObject
>;

export type OracleRequestFulfilledEventFilter =
  TypedEventFilter<OracleRequestFulfilledEvent>;

export interface OracleRequestSentEventObject {
  sender: string;
  requestId: BigNumber;
}
export type OracleRequestSentEvent = TypedEvent<
  [string, BigNumber],
  OracleRequestSentEventObject
>;

export type OracleRequestSentEventFilter =
  TypedEventFilter<OracleRequestSentEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PrizeCategoryCreatedEventObject {
  categoryId: BigNumber;
  chance: BigNumber;
}
export type PrizeCategoryCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PrizeCategoryCreatedEventObject
>;

export type PrizeCategoryCreatedEventFilter =
  TypedEventFilter<PrizeCategoryCreatedEvent>;

export interface PrizeCategoryUpdatedEventObject {
  categoryId: BigNumber;
  chance: BigNumber;
}
export type PrizeCategoryUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PrizeCategoryUpdatedEventObject
>;

export type PrizeCategoryUpdatedEventFilter =
  TypedEventFilter<PrizeCategoryUpdatedEvent>;

export interface PrizeInCategoryAddedEventObject {
  categoryId: BigNumber;
  prizeId: BigNumber;
}
export type PrizeInCategoryAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PrizeInCategoryAddedEventObject
>;

export type PrizeInCategoryAddedEventFilter =
  TypedEventFilter<PrizeInCategoryAddedEvent>;

export interface PrizeInCategoryFinishedEventObject {
  categoryId: BigNumber;
}
export type PrizeInCategoryFinishedEvent = TypedEvent<
  [BigNumber],
  PrizeInCategoryFinishedEventObject
>;

export type PrizeInCategoryFinishedEventFilter =
  TypedEventFilter<PrizeInCategoryFinishedEvent>;

export interface PrizeInCategoryWithdrawnEventObject {
  categoryId: BigNumber;
  prizeId: BigNumber;
  to: string;
  remaining: BigNumber;
}
export type PrizeInCategoryWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  PrizeInCategoryWithdrawnEventObject
>;

export type PrizeInCategoryWithdrawnEventFilter =
  TypedEventFilter<PrizeInCategoryWithdrawnEvent>;

export interface PrizeSentEventObject {
  sender: string;
  tokenAddress: string;
  isERC20: boolean;
  isERC721: boolean;
  isERC1155: boolean;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type PrizeSentEvent = TypedEvent<
  [string, string, boolean, boolean, boolean, BigNumber, BigNumber],
  PrizeSentEventObject
>;

export type PrizeSentEventFilter = TypedEventFilter<PrizeSentEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface TokensPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokensPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPrizeToCategory(
      categoryId: BigNumberish,
      from: string,
      tokenAddress: string,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    categoriesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCategory(
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enablePrizeCalculationInOracleResponse(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableRequestRandomInOracle(overrides?: CallOverrides): Promise<[boolean]>;

    getCategory(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], boolean]>;

    getCategoryPrize(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokensPool.PrizeStructOutput]>;

    getCategoryPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokensPool.PrizeStructOutput[]]>;

    getCategoryRemainingPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokensPool.PrizeStructOutput[]]>;

    getNonEmptyCategories(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPrizeFromOracleRandom(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTotalChance(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasActiveRequest(
      sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isRequestFulfilled(
      sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    prizeCategories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { chance: BigNumber; isEmpty: boolean }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removePrizeInCategory(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestPrize(
      sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    senderRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    senderRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateCategoryChance(
      categoryId: BigNumberish,
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePrizeCalculationInResponse(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRequestRandomInOracle(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  addPrizeToCategory(
    categoryId: BigNumberish,
    from: string,
    tokenAddress: string,
    isERC20: boolean,
    isERC721: boolean,
    isERC1155: boolean,
    amount: BigNumberish,
    tokenIds: BigNumberish[],
    remaining: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

  createCategory(
    chance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enablePrizeCalculationInOracleResponse(
    overrides?: CallOverrides
  ): Promise<boolean>;

  enableRequestRandomInOracle(overrides?: CallOverrides): Promise<boolean>;

  getCategory(
    categoryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], boolean]>;

  getCategoryPrize(
    categoryId: BigNumberish,
    prizeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokensPool.PrizeStructOutput>;

  getCategoryPrizes(
    categoryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokensPool.PrizeStructOutput[]>;

  getCategoryRemainingPrizes(
    categoryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokensPool.PrizeStructOutput[]>;

  getNonEmptyCategories(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPrizeFromOracleRandom(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTotalChance(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasActiveRequest(sender: string, overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    coordinator: string,
    subscriptionId: BigNumberish,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isRequestFulfilled(
    sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  prizeCategories(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { chance: BigNumber; isEmpty: boolean }>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removePrizeInCategory(
    categoryId: BigNumberish,
    prizeId: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestPrize(
    sender: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  senderRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  senderRequestsCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateCallbackGasLimit(
    gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateCategoryChance(
    categoryId: BigNumberish,
    chance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKeyHash(
    kayHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePrizeCalculationInResponse(
    isEnabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRequestConfirmations(
    confirmations: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRequestRandomInOracle(
    isEnabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubscriptionId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    addPrizeToCategory(
      categoryId: BigNumberish,
      from: string,
      tokenAddress: string,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCategory(
      chance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enablePrizeCalculationInOracleResponse(
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableRequestRandomInOracle(overrides?: CallOverrides): Promise<boolean>;

    getCategory(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], boolean]>;

    getCategoryPrize(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokensPool.PrizeStructOutput>;

    getCategoryPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokensPool.PrizeStructOutput[]>;

    getCategoryRemainingPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokensPool.PrizeStructOutput[]>;

    getNonEmptyCategories(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPrizeFromOracleRandom(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTotalChance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasActiveRequest(
      sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isRequestFulfilled(
      sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    prizeCategories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { chance: BigNumber; isEmpty: boolean }>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removePrizeInCategory(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPrize(sender: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    senderRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    senderRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCategoryChance(
      categoryId: BigNumberish,
      chance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeyHash(kayHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    updatePrizeCalculationInResponse(
      isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRequestRandomInOracle(
      isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OracleRequestFulfilled(address,uint256,uint256)"(
      sender?: string | null,
      requestId?: BigNumberish | null,
      randomWord?: null
    ): OracleRequestFulfilledEventFilter;
    OracleRequestFulfilled(
      sender?: string | null,
      requestId?: BigNumberish | null,
      randomWord?: null
    ): OracleRequestFulfilledEventFilter;

    "OracleRequestSent(address,uint256)"(
      sender?: string | null,
      requestId?: BigNumberish | null
    ): OracleRequestSentEventFilter;
    OracleRequestSent(
      sender?: string | null,
      requestId?: BigNumberish | null
    ): OracleRequestSentEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PrizeCategoryCreated(uint256,uint256)"(
      categoryId?: BigNumberish | null,
      chance?: null
    ): PrizeCategoryCreatedEventFilter;
    PrizeCategoryCreated(
      categoryId?: BigNumberish | null,
      chance?: null
    ): PrizeCategoryCreatedEventFilter;

    "PrizeCategoryUpdated(uint256,uint256)"(
      categoryId?: BigNumberish | null,
      chance?: null
    ): PrizeCategoryUpdatedEventFilter;
    PrizeCategoryUpdated(
      categoryId?: BigNumberish | null,
      chance?: null
    ): PrizeCategoryUpdatedEventFilter;

    "PrizeInCategoryAdded(uint256,uint256)"(
      categoryId?: BigNumberish | null,
      prizeId?: BigNumberish | null
    ): PrizeInCategoryAddedEventFilter;
    PrizeInCategoryAdded(
      categoryId?: BigNumberish | null,
      prizeId?: BigNumberish | null
    ): PrizeInCategoryAddedEventFilter;

    "PrizeInCategoryFinished(uint256)"(
      categoryId?: BigNumberish | null
    ): PrizeInCategoryFinishedEventFilter;
    PrizeInCategoryFinished(
      categoryId?: BigNumberish | null
    ): PrizeInCategoryFinishedEventFilter;

    "PrizeInCategoryWithdrawn(uint256,uint256,address,uint256)"(
      categoryId?: BigNumberish | null,
      prizeId?: BigNumberish | null,
      to?: null,
      remaining?: null
    ): PrizeInCategoryWithdrawnEventFilter;
    PrizeInCategoryWithdrawn(
      categoryId?: BigNumberish | null,
      prizeId?: BigNumberish | null,
      to?: null,
      remaining?: null
    ): PrizeInCategoryWithdrawnEventFilter;

    "PrizeSent(address,address,bool,bool,bool,uint256,uint256)"(
      sender?: string | null,
      tokenAddress?: null,
      isERC20?: null,
      isERC721?: null,
      isERC1155?: null,
      tokenId?: null,
      amount?: null
    ): PrizeSentEventFilter;
    PrizeSent(
      sender?: string | null,
      tokenAddress?: null,
      isERC20?: null,
      isERC721?: null,
      isERC1155?: null,
      tokenId?: null,
      amount?: null
    ): PrizeSentEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPrizeToCategory(
      categoryId: BigNumberish,
      from: string,
      tokenAddress: string,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCategory(
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enablePrizeCalculationInOracleResponse(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableRequestRandomInOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getCategory(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryPrize(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryRemainingPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonEmptyCategories(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeFromOracleRandom(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalChance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasActiveRequest(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isRequestFulfilled(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    prizeCategories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removePrizeInCategory(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestPrize(
      sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    senderRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    senderRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateCategoryChance(
      categoryId: BigNumberish,
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePrizeCalculationInResponse(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRequestRandomInOracle(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPrizeToCategory(
      categoryId: BigNumberish,
      from: string,
      tokenAddress: string,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    categoriesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCategory(
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enablePrizeCalculationInOracleResponse(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableRequestRandomInOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategory(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryPrize(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryRemainingPrizes(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonEmptyCategories(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeFromOracleRandom(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalChance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasActiveRequest(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isRequestFulfilled(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeCategories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removePrizeInCategory(
      categoryId: BigNumberish,
      prizeId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestPrize(
      sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    senderRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    senderRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateCategoryChance(
      categoryId: BigNumberish,
      chance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePrizeCalculationInResponse(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRequestRandomInOracle(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

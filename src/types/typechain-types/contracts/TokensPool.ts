/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TokensPool {
  export type PrizeStruct = {
    tokenAddress: AddressLike;
    isERC20: boolean;
    isERC721: boolean;
    isERC1155: boolean;
    amount: BigNumberish;
    tokenIds: BigNumberish[];
    remaining: BigNumberish;
  };

  export type PrizeStructOutput = [
    tokenAddress: string,
    isERC20: boolean,
    isERC721: boolean,
    isERC1155: boolean,
    amount: bigint,
    tokenIds: bigint[],
    remaining: bigint
  ] & {
    tokenAddress: string;
    isERC20: boolean;
    isERC721: boolean;
    isERC1155: boolean;
    amount: bigint;
    tokenIds: bigint[];
    remaining: bigint;
  };
}

export interface TokensPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "UPGRADER_ROLE"
      | "addPrizeToCategory"
      | "categoriesLength"
      | "createCategory"
      | "enablePrizeCalculationInOracleResponse"
      | "enableRequestRandomInOracle"
      | "getCategory"
      | "getCategoryPrize"
      | "getCategoryPrizes"
      | "getCategoryRemainingPrizes"
      | "getNonEmptyCategories"
      | "getPrizeFromOracleRandom"
      | "getRoleAdmin"
      | "getTotalChance"
      | "grantRole"
      | "hasActiveRequest"
      | "hasRole"
      | "initialize"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "prizeCategories"
      | "proxiableUUID"
      | "rawFulfillRandomWords"
      | "removePrizeInCategory"
      | "renounceRole"
      | "requestPrize"
      | "revokeRole"
      | "senderRequests"
      | "senderRequestsCount"
      | "supportsInterface"
      | "unpause"
      | "updateCallbackGasLimit"
      | "updateCategoryChance"
      | "updateKeyHash"
      | "updatePrizeCalculationInResponse"
      | "updateRequestConfirmations"
      | "updateRequestRandomInOracle"
      | "updateSubscriptionId"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "OracleRequestFulfilled"
      | "OracleRequestSent"
      | "Paused"
      | "PrizeCategoryCreated"
      | "PrizeCategoryUpdated"
      | "PrizeInCategoryAdded"
      | "PrizeInCategoryFinished"
      | "PrizeInCategoryWithdrawn"
      | "PrizeSent"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPrizeToCategory",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      boolean,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "categoriesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePrizeCalculationInOracleResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRequestRandomInOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryPrize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryRemainingPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonEmptyCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeFromOracleRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrizeInCategory",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "senderRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "senderRequestsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCategoryChance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrizeCalculationInResponse",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestRandomInOracle",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPrizeToCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoriesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePrizeCalculationInOracleResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRequestRandomInOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryRemainingPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonEmptyCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeFromOracleRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrizeInCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "senderRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "senderRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCategoryChance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrizeCalculationInResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestRandomInOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestFulfilledEvent {
  export type InputTuple = [
    sender: AddressLike,
    requestId: BigNumberish,
    randomWord: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    requestId: bigint,
    randomWord: bigint
  ];
  export interface OutputObject {
    sender: string;
    requestId: bigint;
    randomWord: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestSentEvent {
  export type InputTuple = [sender: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [sender: string, requestId: bigint];
  export interface OutputObject {
    sender: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeCategoryCreatedEvent {
  export type InputTuple = [categoryId: BigNumberish, chance: BigNumberish];
  export type OutputTuple = [categoryId: bigint, chance: bigint];
  export interface OutputObject {
    categoryId: bigint;
    chance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeCategoryUpdatedEvent {
  export type InputTuple = [categoryId: BigNumberish, chance: BigNumberish];
  export type OutputTuple = [categoryId: bigint, chance: bigint];
  export interface OutputObject {
    categoryId: bigint;
    chance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeInCategoryAddedEvent {
  export type InputTuple = [categoryId: BigNumberish, prizeId: BigNumberish];
  export type OutputTuple = [categoryId: bigint, prizeId: bigint];
  export interface OutputObject {
    categoryId: bigint;
    prizeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeInCategoryFinishedEvent {
  export type InputTuple = [categoryId: BigNumberish];
  export type OutputTuple = [categoryId: bigint];
  export interface OutputObject {
    categoryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeInCategoryWithdrawnEvent {
  export type InputTuple = [
    categoryId: BigNumberish,
    prizeId: BigNumberish,
    to: AddressLike,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    categoryId: bigint,
    prizeId: bigint,
    to: string,
    remaining: bigint
  ];
  export interface OutputObject {
    categoryId: bigint;
    prizeId: bigint;
    to: string;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeSentEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenAddress: AddressLike,
    isERC20: boolean,
    isERC721: boolean,
    isERC1155: boolean,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenAddress: string,
    isERC20: boolean,
    isERC721: boolean,
    isERC1155: boolean,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenAddress: string;
    isERC20: boolean;
    isERC721: boolean;
    isERC1155: boolean;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokensPool extends BaseContract {
  connect(runner?: ContractRunner | null): TokensPool;
  waitForDeployment(): Promise<this>;

  interface: TokensPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  addPrizeToCategory: TypedContractMethod<
    [
      categoryId: BigNumberish,
      from: AddressLike,
      tokenAddress: AddressLike,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  categoriesLength: TypedContractMethod<[], [bigint], "view">;

  createCategory: TypedContractMethod<
    [chance: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  enablePrizeCalculationInOracleResponse: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  enableRequestRandomInOracle: TypedContractMethod<[], [boolean], "view">;

  getCategory: TypedContractMethod<
    [categoryId: BigNumberish],
    [[bigint, bigint[], boolean]],
    "view"
  >;

  getCategoryPrize: TypedContractMethod<
    [categoryId: BigNumberish, prizeId: BigNumberish],
    [TokensPool.PrizeStructOutput],
    "view"
  >;

  getCategoryPrizes: TypedContractMethod<
    [categoryId: BigNumberish],
    [TokensPool.PrizeStructOutput[]],
    "view"
  >;

  getCategoryRemainingPrizes: TypedContractMethod<
    [categoryId: BigNumberish],
    [TokensPool.PrizeStructOutput[]],
    "view"
  >;

  getNonEmptyCategories: TypedContractMethod<[], [bigint[]], "view">;

  getPrizeFromOracleRandom: TypedContractMethod<[], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalChance: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasActiveRequest: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      coordinator: AddressLike,
      subscriptionId: BigNumberish,
      keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  prizeCategories: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { chance: bigint; isEmpty: boolean }],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  removePrizeInCategory: TypedContractMethod<
    [categoryId: BigNumberish, prizeId: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestPrize: TypedContractMethod<
    [sender: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  senderRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  senderRequestsCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCallbackGasLimit: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCategoryChance: TypedContractMethod<
    [categoryId: BigNumberish, chance: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateKeyHash: TypedContractMethod<
    [kayHash: BytesLike],
    [void],
    "nonpayable"
  >;

  updatePrizeCalculationInResponse: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  updateRequestConfirmations: TypedContractMethod<
    [confirmations: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRequestRandomInOracle: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  updateSubscriptionId: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addPrizeToCategory"
  ): TypedContractMethod<
    [
      categoryId: BigNumberish,
      from: AddressLike,
      tokenAddress: AddressLike,
      isERC20: boolean,
      isERC721: boolean,
      isERC1155: boolean,
      amount: BigNumberish,
      tokenIds: BigNumberish[],
      remaining: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "categoriesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCategory"
  ): TypedContractMethod<[chance: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "enablePrizeCalculationInOracleResponse"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "enableRequestRandomInOracle"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCategory"
  ): TypedContractMethod<
    [categoryId: BigNumberish],
    [[bigint, bigint[], boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategoryPrize"
  ): TypedContractMethod<
    [categoryId: BigNumberish, prizeId: BigNumberish],
    [TokensPool.PrizeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategoryPrizes"
  ): TypedContractMethod<
    [categoryId: BigNumberish],
    [TokensPool.PrizeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategoryRemainingPrizes"
  ): TypedContractMethod<
    [categoryId: BigNumberish],
    [TokensPool.PrizeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonEmptyCategories"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPrizeFromOracleRandom"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalChance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasActiveRequest"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      coordinator: AddressLike,
      subscriptionId: BigNumberish,
      keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "prizeCategories"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { chance: bigint; isEmpty: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removePrizeInCategory"
  ): TypedContractMethod<
    [categoryId: BigNumberish, prizeId: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestPrize"
  ): TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "senderRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "senderRequestsCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCallbackGasLimit"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCategoryChance"
  ): TypedContractMethod<
    [categoryId: BigNumberish, chance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKeyHash"
  ): TypedContractMethod<[kayHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrizeCalculationInResponse"
  ): TypedContractMethod<[isEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRequestConfirmations"
  ): TypedContractMethod<[confirmations: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRequestRandomInOracle"
  ): TypedContractMethod<[isEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSubscriptionId"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequestFulfilled"
  ): TypedContractEvent<
    OracleRequestFulfilledEvent.InputTuple,
    OracleRequestFulfilledEvent.OutputTuple,
    OracleRequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequestSent"
  ): TypedContractEvent<
    OracleRequestSentEvent.InputTuple,
    OracleRequestSentEvent.OutputTuple,
    OracleRequestSentEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeCategoryCreated"
  ): TypedContractEvent<
    PrizeCategoryCreatedEvent.InputTuple,
    PrizeCategoryCreatedEvent.OutputTuple,
    PrizeCategoryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeCategoryUpdated"
  ): TypedContractEvent<
    PrizeCategoryUpdatedEvent.InputTuple,
    PrizeCategoryUpdatedEvent.OutputTuple,
    PrizeCategoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeInCategoryAdded"
  ): TypedContractEvent<
    PrizeInCategoryAddedEvent.InputTuple,
    PrizeInCategoryAddedEvent.OutputTuple,
    PrizeInCategoryAddedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeInCategoryFinished"
  ): TypedContractEvent<
    PrizeInCategoryFinishedEvent.InputTuple,
    PrizeInCategoryFinishedEvent.OutputTuple,
    PrizeInCategoryFinishedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeInCategoryWithdrawn"
  ): TypedContractEvent<
    PrizeInCategoryWithdrawnEvent.InputTuple,
    PrizeInCategoryWithdrawnEvent.OutputTuple,
    PrizeInCategoryWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PrizeSent"
  ): TypedContractEvent<
    PrizeSentEvent.InputTuple,
    PrizeSentEvent.OutputTuple,
    PrizeSentEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OracleRequestFulfilled(address,uint256,uint256)": TypedContractEvent<
      OracleRequestFulfilledEvent.InputTuple,
      OracleRequestFulfilledEvent.OutputTuple,
      OracleRequestFulfilledEvent.OutputObject
    >;
    OracleRequestFulfilled: TypedContractEvent<
      OracleRequestFulfilledEvent.InputTuple,
      OracleRequestFulfilledEvent.OutputTuple,
      OracleRequestFulfilledEvent.OutputObject
    >;

    "OracleRequestSent(address,uint256)": TypedContractEvent<
      OracleRequestSentEvent.InputTuple,
      OracleRequestSentEvent.OutputTuple,
      OracleRequestSentEvent.OutputObject
    >;
    OracleRequestSent: TypedContractEvent<
      OracleRequestSentEvent.InputTuple,
      OracleRequestSentEvent.OutputTuple,
      OracleRequestSentEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PrizeCategoryCreated(uint256,uint256)": TypedContractEvent<
      PrizeCategoryCreatedEvent.InputTuple,
      PrizeCategoryCreatedEvent.OutputTuple,
      PrizeCategoryCreatedEvent.OutputObject
    >;
    PrizeCategoryCreated: TypedContractEvent<
      PrizeCategoryCreatedEvent.InputTuple,
      PrizeCategoryCreatedEvent.OutputTuple,
      PrizeCategoryCreatedEvent.OutputObject
    >;

    "PrizeCategoryUpdated(uint256,uint256)": TypedContractEvent<
      PrizeCategoryUpdatedEvent.InputTuple,
      PrizeCategoryUpdatedEvent.OutputTuple,
      PrizeCategoryUpdatedEvent.OutputObject
    >;
    PrizeCategoryUpdated: TypedContractEvent<
      PrizeCategoryUpdatedEvent.InputTuple,
      PrizeCategoryUpdatedEvent.OutputTuple,
      PrizeCategoryUpdatedEvent.OutputObject
    >;

    "PrizeInCategoryAdded(uint256,uint256)": TypedContractEvent<
      PrizeInCategoryAddedEvent.InputTuple,
      PrizeInCategoryAddedEvent.OutputTuple,
      PrizeInCategoryAddedEvent.OutputObject
    >;
    PrizeInCategoryAdded: TypedContractEvent<
      PrizeInCategoryAddedEvent.InputTuple,
      PrizeInCategoryAddedEvent.OutputTuple,
      PrizeInCategoryAddedEvent.OutputObject
    >;

    "PrizeInCategoryFinished(uint256)": TypedContractEvent<
      PrizeInCategoryFinishedEvent.InputTuple,
      PrizeInCategoryFinishedEvent.OutputTuple,
      PrizeInCategoryFinishedEvent.OutputObject
    >;
    PrizeInCategoryFinished: TypedContractEvent<
      PrizeInCategoryFinishedEvent.InputTuple,
      PrizeInCategoryFinishedEvent.OutputTuple,
      PrizeInCategoryFinishedEvent.OutputObject
    >;

    "PrizeInCategoryWithdrawn(uint256,uint256,address,uint256)": TypedContractEvent<
      PrizeInCategoryWithdrawnEvent.InputTuple,
      PrizeInCategoryWithdrawnEvent.OutputTuple,
      PrizeInCategoryWithdrawnEvent.OutputObject
    >;
    PrizeInCategoryWithdrawn: TypedContractEvent<
      PrizeInCategoryWithdrawnEvent.InputTuple,
      PrizeInCategoryWithdrawnEvent.OutputTuple,
      PrizeInCategoryWithdrawnEvent.OutputObject
    >;

    "PrizeSent(address,address,bool,bool,bool,uint256,uint256)": TypedContractEvent<
      PrizeSentEvent.InputTuple,
      PrizeSentEvent.OutputTuple,
      PrizeSentEvent.OutputObject
    >;
    PrizeSent: TypedContractEvent<
      PrizeSentEvent.InputTuple,
      PrizeSentEvent.OutputTuple,
      PrizeSentEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AvatarSettingsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "POWER_DURATION"
      | "UPGRADER_ROLE"
      | "activateAvatar"
      | "activatePower"
      | "activatePowerAccess"
      | "activeAvatars"
      | "approveCollection"
      | "approvedCollections"
      | "birthdayPrizeClaimPeriod"
      | "deactivateAvatar"
      | "getRoleAdmin"
      | "getYear"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isBirthdayInRange"
      | "isBirthdayPrizeAvailable"
      | "isPowerAccessActive"
      | "pause"
      | "paused"
      | "powerActivationFee"
      | "proxiableUUID"
      | "renounceRole"
      | "requestBirthdayPrize"
      | "revokeRole"
      | "setBirthdayPrizeClaimPeriod"
      | "setTokenName"
      | "setTokenTelegram"
      | "supportsInterface"
      | "unpause"
      | "updatePowerActivationFee"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userPowers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AvatarActivated"
      | "AvatarDeactivated"
      | "BeaconUpgraded"
      | "BirthdayPrizeClaimed"
      | "CollectionApprovalUpdated"
      | "ExternalAvatarActivated"
      | "Initialized"
      | "NameChanged"
      | "Paused"
      | "PowerActivated"
      | "PowerActivationFeeUpdated"
      | "PowersAccessActivated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TelegramChanged"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POWER_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateAvatar",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activatePower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activatePowerAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAvatars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCollection",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCollections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "birthdayPrizeClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAvatar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBirthdayInRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBirthdayPrizeAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPowerAccessActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerActivationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestBirthdayPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBirthdayPrizeClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTelegram",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePowerActivationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPowers",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POWER_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePowerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAvatars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "birthdayPrizeClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBirthdayInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBirthdayPrizeAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPowerAccessActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerActivationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBirthdayPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBirthdayPrizeClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTelegram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePowerActivationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPowers", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarActivatedEvent {
  export type InputTuple = [sender: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [sender: string, tokenId: bigint];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarDeactivatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    collectionAddress: AddressLike,
    isAvatarCollection: boolean
  ];
  export type OutputTuple = [
    sender: string,
    tokenId: bigint,
    collectionAddress: string,
    isAvatarCollection: boolean
  ];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    collectionAddress: string;
    isAvatarCollection: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BirthdayPrizeClaimedEvent {
  export type InputTuple = [tokenId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [tokenId: bigint, owner: string];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionApprovalUpdatedEvent {
  export type InputTuple = [collection: AddressLike, approved: boolean];
  export type OutputTuple = [collection: string, approved: boolean];
  export interface OutputObject {
    collection: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExternalAvatarActivatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    collection: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    tokenId: bigint,
    collection: string
  ];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    collection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameChangedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    name: string
  ];
  export type OutputTuple = [sender: string, tokenId: bigint, name: string];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PowerActivatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    powerId: BigNumberish,
    expirationTime: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    powerId: bigint,
    expirationTime: bigint
  ];
  export interface OutputObject {
    sender: string;
    powerId: bigint;
    expirationTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PowerActivationFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PowersAccessActivatedEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TelegramChangedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    telegram: string
  ];
  export type OutputTuple = [sender: string, tokenId: bigint, telegram: string];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    telegram: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AvatarSettings extends BaseContract {
  connect(runner?: ContractRunner | null): AvatarSettings;
  waitForDeployment(): Promise<this>;

  interface: AvatarSettingsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  POWER_DURATION: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  activateAvatar: TypedContractMethod<
    [collectionAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  activatePower: TypedContractMethod<
    [powerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  activatePowerAccess: TypedContractMethod<[], [void], "nonpayable">;

  activeAvatars: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, boolean] & {
        collection: string;
        tokenId: bigint;
        isAvatarCollection: boolean;
        isPowersAllowed: boolean;
      }
    ],
    "view"
  >;

  approveCollection: TypedContractMethod<
    [collectionAddress: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  approvedCollections: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  birthdayPrizeClaimPeriod: TypedContractMethod<[], [bigint], "view">;

  deactivateAvatar: TypedContractMethod<[], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getYear: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isBirthdayInRange: TypedContractMethod<
    [birthdayTimestamp: BigNumberish],
    [boolean],
    "view"
  >;

  isBirthdayPrizeAvailable: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isPowerAccessActive: TypedContractMethod<[], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  powerActivationFee: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestBirthdayPrize: TypedContractMethod<[], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBirthdayPrizeClaimPeriod: TypedContractMethod<
    [_days: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenName: TypedContractMethod<
    [_tokenId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  setTokenTelegram: TypedContractMethod<
    [_tokenId: BigNumberish, _telegram: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePowerActivationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userPowers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POWER_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateAvatar"
  ): TypedContractMethod<
    [collectionAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "activatePower"
  ): TypedContractMethod<[powerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activatePowerAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activeAvatars"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, boolean] & {
        collection: string;
        tokenId: bigint;
        isAvatarCollection: boolean;
        isPowersAllowed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveCollection"
  ): TypedContractMethod<
    [collectionAddress: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approvedCollections"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "birthdayPrizeClaimPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deactivateAvatar"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getYear"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBirthdayInRange"
  ): TypedContractMethod<[birthdayTimestamp: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBirthdayPrizeAvailable"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPowerAccessActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "powerActivationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestBirthdayPrize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBirthdayPrizeClaimPeriod"
  ): TypedContractMethod<[_days: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenName"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenTelegram"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _telegram: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePowerActivationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userPowers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AvatarActivated"
  ): TypedContractEvent<
    AvatarActivatedEvent.InputTuple,
    AvatarActivatedEvent.OutputTuple,
    AvatarActivatedEvent.OutputObject
  >;
  getEvent(
    key: "AvatarDeactivated"
  ): TypedContractEvent<
    AvatarDeactivatedEvent.InputTuple,
    AvatarDeactivatedEvent.OutputTuple,
    AvatarDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BirthdayPrizeClaimed"
  ): TypedContractEvent<
    BirthdayPrizeClaimedEvent.InputTuple,
    BirthdayPrizeClaimedEvent.OutputTuple,
    BirthdayPrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionApprovalUpdated"
  ): TypedContractEvent<
    CollectionApprovalUpdatedEvent.InputTuple,
    CollectionApprovalUpdatedEvent.OutputTuple,
    CollectionApprovalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExternalAvatarActivated"
  ): TypedContractEvent<
    ExternalAvatarActivatedEvent.InputTuple,
    ExternalAvatarActivatedEvent.OutputTuple,
    ExternalAvatarActivatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NameChanged"
  ): TypedContractEvent<
    NameChangedEvent.InputTuple,
    NameChangedEvent.OutputTuple,
    NameChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PowerActivated"
  ): TypedContractEvent<
    PowerActivatedEvent.InputTuple,
    PowerActivatedEvent.OutputTuple,
    PowerActivatedEvent.OutputObject
  >;
  getEvent(
    key: "PowerActivationFeeUpdated"
  ): TypedContractEvent<
    PowerActivationFeeUpdatedEvent.InputTuple,
    PowerActivationFeeUpdatedEvent.OutputTuple,
    PowerActivationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PowersAccessActivated"
  ): TypedContractEvent<
    PowersAccessActivatedEvent.InputTuple,
    PowersAccessActivatedEvent.OutputTuple,
    PowersAccessActivatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TelegramChanged"
  ): TypedContractEvent<
    TelegramChangedEvent.InputTuple,
    TelegramChangedEvent.OutputTuple,
    TelegramChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AvatarActivated(address,uint256)": TypedContractEvent<
      AvatarActivatedEvent.InputTuple,
      AvatarActivatedEvent.OutputTuple,
      AvatarActivatedEvent.OutputObject
    >;
    AvatarActivated: TypedContractEvent<
      AvatarActivatedEvent.InputTuple,
      AvatarActivatedEvent.OutputTuple,
      AvatarActivatedEvent.OutputObject
    >;

    "AvatarDeactivated(address,uint256,address,bool)": TypedContractEvent<
      AvatarDeactivatedEvent.InputTuple,
      AvatarDeactivatedEvent.OutputTuple,
      AvatarDeactivatedEvent.OutputObject
    >;
    AvatarDeactivated: TypedContractEvent<
      AvatarDeactivatedEvent.InputTuple,
      AvatarDeactivatedEvent.OutputTuple,
      AvatarDeactivatedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "BirthdayPrizeClaimed(uint256,address)": TypedContractEvent<
      BirthdayPrizeClaimedEvent.InputTuple,
      BirthdayPrizeClaimedEvent.OutputTuple,
      BirthdayPrizeClaimedEvent.OutputObject
    >;
    BirthdayPrizeClaimed: TypedContractEvent<
      BirthdayPrizeClaimedEvent.InputTuple,
      BirthdayPrizeClaimedEvent.OutputTuple,
      BirthdayPrizeClaimedEvent.OutputObject
    >;

    "CollectionApprovalUpdated(address,bool)": TypedContractEvent<
      CollectionApprovalUpdatedEvent.InputTuple,
      CollectionApprovalUpdatedEvent.OutputTuple,
      CollectionApprovalUpdatedEvent.OutputObject
    >;
    CollectionApprovalUpdated: TypedContractEvent<
      CollectionApprovalUpdatedEvent.InputTuple,
      CollectionApprovalUpdatedEvent.OutputTuple,
      CollectionApprovalUpdatedEvent.OutputObject
    >;

    "ExternalAvatarActivated(address,uint256,address)": TypedContractEvent<
      ExternalAvatarActivatedEvent.InputTuple,
      ExternalAvatarActivatedEvent.OutputTuple,
      ExternalAvatarActivatedEvent.OutputObject
    >;
    ExternalAvatarActivated: TypedContractEvent<
      ExternalAvatarActivatedEvent.InputTuple,
      ExternalAvatarActivatedEvent.OutputTuple,
      ExternalAvatarActivatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NameChanged(address,uint256,string)": TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;
    NameChanged: TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PowerActivated(address,uint256,uint256)": TypedContractEvent<
      PowerActivatedEvent.InputTuple,
      PowerActivatedEvent.OutputTuple,
      PowerActivatedEvent.OutputObject
    >;
    PowerActivated: TypedContractEvent<
      PowerActivatedEvent.InputTuple,
      PowerActivatedEvent.OutputTuple,
      PowerActivatedEvent.OutputObject
    >;

    "PowerActivationFeeUpdated(uint256)": TypedContractEvent<
      PowerActivationFeeUpdatedEvent.InputTuple,
      PowerActivationFeeUpdatedEvent.OutputTuple,
      PowerActivationFeeUpdatedEvent.OutputObject
    >;
    PowerActivationFeeUpdated: TypedContractEvent<
      PowerActivationFeeUpdatedEvent.InputTuple,
      PowerActivationFeeUpdatedEvent.OutputTuple,
      PowerActivationFeeUpdatedEvent.OutputObject
    >;

    "PowersAccessActivated(address)": TypedContractEvent<
      PowersAccessActivatedEvent.InputTuple,
      PowersAccessActivatedEvent.OutputTuple,
      PowersAccessActivatedEvent.OutputObject
    >;
    PowersAccessActivated: TypedContractEvent<
      PowersAccessActivatedEvent.InputTuple,
      PowersAccessActivatedEvent.OutputTuple,
      PowersAccessActivatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TelegramChanged(address,uint256,string)": TypedContractEvent<
      TelegramChangedEvent.InputTuple,
      TelegramChangedEvent.OutputTuple,
      TelegramChangedEvent.OutputObject
    >;
    TelegramChanged: TypedContractEvent<
      TelegramChangedEvent.InputTuple,
      TelegramChangedEvent.OutputTuple,
      TelegramChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

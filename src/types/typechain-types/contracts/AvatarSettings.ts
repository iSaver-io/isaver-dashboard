/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AvatarSettingsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "POWER_DURATION()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "activateAvatar(address,uint256)": FunctionFragment;
    "activatePower(uint256)": FunctionFragment;
    "activatePowerAccess()": FunctionFragment;
    "activeAvatars(address)": FunctionFragment;
    "approveCollection(address,bool)": FunctionFragment;
    "approvedCollections(address)": FunctionFragment;
    "deactivateAvatar()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "powerActivationFee()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setTokenName(uint256,string)": FunctionFragment;
    "setTokenTelegram(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePowerActivationFee(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userPowers(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "POWER_DURATION"
      | "UPGRADER_ROLE"
      | "activateAvatar"
      | "activatePower"
      | "activatePowerAccess"
      | "activeAvatars"
      | "approveCollection"
      | "approvedCollections"
      | "deactivateAvatar"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pause"
      | "paused"
      | "powerActivationFee"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setTokenName"
      | "setTokenTelegram"
      | "supportsInterface"
      | "unpause"
      | "updatePowerActivationFee"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userPowers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POWER_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateAvatar",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activatePower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activatePowerAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAvatars",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCollection",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCollections",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAvatar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerActivationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTelegram",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePowerActivationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPowers",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POWER_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePowerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAvatars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerActivationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTelegram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePowerActivationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPowers", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AvatarActivated(address,uint256)": EventFragment;
    "AvatarDeactivated(address,uint256,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CollectionApprovalUpdated(address,bool)": EventFragment;
    "ExternalAvatarActivated(address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NameChanged(address,uint256,string)": EventFragment;
    "Paused(address)": EventFragment;
    "PowerActivated(address,uint256,uint256)": EventFragment;
    "PowerActivationFeeUpdated(uint256)": EventFragment;
    "PowersAccessActivated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TelegramChanged(address,uint256,string)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalAvatarActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerActivationFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowersAccessActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TelegramChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AvatarActivatedEventObject {
  sender: string;
  tokenId: BigNumber;
}
export type AvatarActivatedEvent = TypedEvent<
  [string, BigNumber],
  AvatarActivatedEventObject
>;

export type AvatarActivatedEventFilter = TypedEventFilter<AvatarActivatedEvent>;

export interface AvatarDeactivatedEventObject {
  sender: string;
  tokenId: BigNumber;
  collectionAddress: string;
}
export type AvatarDeactivatedEvent = TypedEvent<
  [string, BigNumber, string],
  AvatarDeactivatedEventObject
>;

export type AvatarDeactivatedEventFilter =
  TypedEventFilter<AvatarDeactivatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CollectionApprovalUpdatedEventObject {
  collection: string;
  approved: boolean;
}
export type CollectionApprovalUpdatedEvent = TypedEvent<
  [string, boolean],
  CollectionApprovalUpdatedEventObject
>;

export type CollectionApprovalUpdatedEventFilter =
  TypedEventFilter<CollectionApprovalUpdatedEvent>;

export interface ExternalAvatarActivatedEventObject {
  sender: string;
  tokenId: BigNumber;
  collection: string;
}
export type ExternalAvatarActivatedEvent = TypedEvent<
  [string, BigNumber, string],
  ExternalAvatarActivatedEventObject
>;

export type ExternalAvatarActivatedEventFilter =
  TypedEventFilter<ExternalAvatarActivatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NameChangedEventObject {
  sender: string;
  tokenId: BigNumber;
  name: string;
}
export type NameChangedEvent = TypedEvent<
  [string, BigNumber, string],
  NameChangedEventObject
>;

export type NameChangedEventFilter = TypedEventFilter<NameChangedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PowerActivatedEventObject {
  sender: string;
  powerId: BigNumber;
  expirationTime: BigNumber;
}
export type PowerActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PowerActivatedEventObject
>;

export type PowerActivatedEventFilter = TypedEventFilter<PowerActivatedEvent>;

export interface PowerActivationFeeUpdatedEventObject {
  newFee: BigNumber;
}
export type PowerActivationFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  PowerActivationFeeUpdatedEventObject
>;

export type PowerActivationFeeUpdatedEventFilter =
  TypedEventFilter<PowerActivationFeeUpdatedEvent>;

export interface PowersAccessActivatedEventObject {
  sender: string;
}
export type PowersAccessActivatedEvent = TypedEvent<
  [string],
  PowersAccessActivatedEventObject
>;

export type PowersAccessActivatedEventFilter =
  TypedEventFilter<PowersAccessActivatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TelegramChangedEventObject {
  sender: string;
  tokenId: BigNumber;
  telegram: string;
}
export type TelegramChangedEvent = TypedEvent<
  [string, BigNumber, string],
  TelegramChangedEventObject
>;

export type TelegramChangedEventFilter = TypedEventFilter<TelegramChangedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AvatarSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvatarSettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POWER_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activateAvatar(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activatePower(
      powerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activatePowerAccess(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeAvatars(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        collection: string;
        tokenId: BigNumber;
        isAvatarCollection: boolean;
        isPowersAllowed: boolean;
      }
    >;

    approveCollection(
      collectionAddress: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvedCollections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deactivateAvatar(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    powerActivationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenTelegram(
      _tokenId: BigNumberish,
      _telegram: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePowerActivationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    userPowers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  POWER_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  activateAvatar(
    collectionAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activatePower(
    powerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activatePowerAccess(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeAvatars(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, boolean] & {
      collection: string;
      tokenId: BigNumber;
      isAvatarCollection: boolean;
      isPowersAllowed: boolean;
    }
  >;

  approveCollection(
    collectionAddress: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvedCollections(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deactivateAvatar(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    contractManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  powerActivationFee(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenName(
    _tokenId: BigNumberish,
    _name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenTelegram(
    _tokenId: BigNumberish,
    _telegram: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePowerActivationFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  userPowers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    POWER_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    activateAvatar(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activatePower(
      powerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activatePowerAccess(overrides?: CallOverrides): Promise<void>;

    activeAvatars(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        collection: string;
        tokenId: BigNumber;
        isAvatarCollection: boolean;
        isPowersAllowed: boolean;
      }
    >;

    approveCollection(
      collectionAddress: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedCollections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deactivateAvatar(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      contractManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    powerActivationFee(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenTelegram(
      _tokenId: BigNumberish,
      _telegram: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePowerActivationFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userPowers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AvatarActivated(address,uint256)"(
      sender?: string | null,
      tokenId?: null
    ): AvatarActivatedEventFilter;
    AvatarActivated(
      sender?: string | null,
      tokenId?: null
    ): AvatarActivatedEventFilter;

    "AvatarDeactivated(address,uint256,address)"(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      collectionAddress?: string | null
    ): AvatarDeactivatedEventFilter;
    AvatarDeactivated(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      collectionAddress?: string | null
    ): AvatarDeactivatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CollectionApprovalUpdated(address,bool)"(
      collection?: null,
      approved?: null
    ): CollectionApprovalUpdatedEventFilter;
    CollectionApprovalUpdated(
      collection?: null,
      approved?: null
    ): CollectionApprovalUpdatedEventFilter;

    "ExternalAvatarActivated(address,uint256,address)"(
      sender?: string | null,
      tokenId?: null,
      collection?: string | null
    ): ExternalAvatarActivatedEventFilter;
    ExternalAvatarActivated(
      sender?: string | null,
      tokenId?: null,
      collection?: string | null
    ): ExternalAvatarActivatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NameChanged(address,uint256,string)"(
      sender?: string | null,
      tokenId?: null,
      name?: null
    ): NameChangedEventFilter;
    NameChanged(
      sender?: string | null,
      tokenId?: null,
      name?: null
    ): NameChangedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PowerActivated(address,uint256,uint256)"(
      sender?: string | null,
      powerId?: BigNumberish | null,
      expirationTime?: null
    ): PowerActivatedEventFilter;
    PowerActivated(
      sender?: string | null,
      powerId?: BigNumberish | null,
      expirationTime?: null
    ): PowerActivatedEventFilter;

    "PowerActivationFeeUpdated(uint256)"(
      newFee?: null
    ): PowerActivationFeeUpdatedEventFilter;
    PowerActivationFeeUpdated(
      newFee?: null
    ): PowerActivationFeeUpdatedEventFilter;

    "PowersAccessActivated(address)"(
      sender?: string | null
    ): PowersAccessActivatedEventFilter;
    PowersAccessActivated(
      sender?: string | null
    ): PowersAccessActivatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TelegramChanged(address,uint256,string)"(
      sender?: string | null,
      tokenId?: null,
      telegram?: null
    ): TelegramChangedEventFilter;
    TelegramChanged(
      sender?: string | null,
      tokenId?: null,
      telegram?: null
    ): TelegramChangedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POWER_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activateAvatar(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activatePower(
      powerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activatePowerAccess(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeAvatars(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approveCollection(
      collectionAddress: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvedCollections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateAvatar(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    powerActivationFee(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenTelegram(
      _tokenId: BigNumberish,
      _telegram: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updatePowerActivationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    userPowers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POWER_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateAvatar(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activatePower(
      powerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activatePowerAccess(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeAvatars(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveCollection(
      collectionAddress: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvedCollections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateAvatar(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerActivationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenTelegram(
      _tokenId: BigNumberish,
      _telegram: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePowerActivationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userPowers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

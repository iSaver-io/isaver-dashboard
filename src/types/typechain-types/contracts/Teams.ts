/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace ITeams {
  export type TeamPlanStruct = {
    teamPlanId: BigNumberish;
    subscriptionCost: BigNumberish;
    reward: BigNumberish;
    stakingThreshold: BigNumberish;
    teamSize: BigNumberish;
    stakingPlanId: BigNumberish;
    isActive: boolean;
  };

  export type TeamPlanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    teamPlanId: BigNumber;
    subscriptionCost: BigNumber;
    reward: BigNumber;
    stakingThreshold: BigNumber;
    teamSize: BigNumber;
    stakingPlanId: BigNumber;
    isActive: boolean;
  };

  export type TeamStruct = {
    subscription: BigNumberish;
    teamsFilled: BigNumberish;
  };

  export type TeamStructOutput = [BigNumber, BigNumber] & {
    subscription: BigNumber;
    teamsFilled: BigNumber;
  };
}

export interface TeamsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SUBSCRIPTION_PERIOD_DAYS()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "addPlan(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getActivePlans()": FunctionFragment;
    "getPlan(uint256)": FunctionFragment;
    "getPlans()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSufficientPlanIdByStakingAmount(uint256,uint256)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getUserSubscription(address,uint256)": FunctionFragment;
    "getUserTeamMembers(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tryToAddMember(uint256,address,address,uint256)": FunctionFragment;
    "updatePlanActivity(uint256,bool)": FunctionFragment;
    "updatePlanReward(uint256,uint256)": FunctionFragment;
    "updatePlanStakingId(uint256,uint256)": FunctionFragment;
    "updatePlanStakingThreshold(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionCost(uint256,uint256)": FunctionFragment;
    "updatePlanTeamSize(uint256,uint256)": FunctionFragment;
    "updateSubscriptionPeriod(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userHasPlanSubscription(address,uint256)": FunctionFragment;
    "userHasSufficientStaking(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "SUBSCRIPTION_PERIOD_DAYS"
      | "UPGRADER_ROLE"
      | "addPlan"
      | "getActivePlans"
      | "getPlan"
      | "getPlans"
      | "getRoleAdmin"
      | "getSufficientPlanIdByStakingAmount"
      | "getTimestamp"
      | "getUserSubscription"
      | "getUserTeamMembers"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "initialize"
      | "plans"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "subscribe"
      | "supportsInterface"
      | "tryToAddMember"
      | "updatePlanActivity"
      | "updatePlanReward"
      | "updatePlanStakingId"
      | "updatePlanStakingThreshold"
      | "updatePlanSubscriptionCost"
      | "updatePlanTeamSize"
      | "updateSubscriptionPeriod"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userHasPlanSubscription"
      | "userHasSufficientStaking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPlan",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPlans", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscription",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTeamMembers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToAddMember",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanTeamSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPlanSubscription",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSufficientStaking",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTeamMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanTeamSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPlanSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSufficientStaking",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MemberAdded(address,uint256,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Subscribed(address,uint256,uint256)": EventFragment;
    "TeamFilled(address,uint256,uint256)": EventFragment;
    "TeamPlanActivityChanged(uint256,bool)": EventFragment;
    "TeamPlanCreated(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamPlanActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamPlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MemberAddedEventObject {
  user: string;
  teamPlanId: BigNumber;
  member: string;
  teamMembers: BigNumber;
}
export type MemberAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  MemberAddedEventObject
>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SubscribedEventObject {
  subscriber: string;
  teamPlanId: BigNumber;
  timestamp: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface TeamFilledEventObject {
  user: string;
  teamPlanId: BigNumber;
  teamCount: BigNumber;
}
export type TeamFilledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TeamFilledEventObject
>;

export type TeamFilledEventFilter = TypedEventFilter<TeamFilledEvent>;

export interface TeamPlanActivityChangedEventObject {
  teamPlanId: BigNumber;
  isActive: boolean;
}
export type TeamPlanActivityChangedEvent = TypedEvent<
  [BigNumber, boolean],
  TeamPlanActivityChangedEventObject
>;

export type TeamPlanActivityChangedEventFilter =
  TypedEventFilter<TeamPlanActivityChangedEvent>;

export interface TeamPlanCreatedEventObject {
  teamPlanId: BigNumber;
  subscriptionCost: BigNumber;
  reward: BigNumber;
  stakingThreshold: BigNumber;
  teamSize: BigNumber;
  stakingPlanId: BigNumber;
}
export type TeamPlanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  TeamPlanCreatedEventObject
>;

export type TeamPlanCreatedEventFilter = TypedEventFilter<TeamPlanCreatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Teams extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TeamsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPlan(
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActivePlans(
      overrides?: CallOverrides
    ): Promise<[ITeams.TeamPlanStructOutput[]]>;

    getPlan(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ITeams.TeamPlanStructOutput]>;

    getPlans(
      overrides?: CallOverrides
    ): Promise<[ITeams.TeamPlanStructOutput[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ITeams.TeamStructOutput]>;

    getUserTeamMembers(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        teamPlanId: BigNumber;
        subscriptionCost: BigNumber;
        reward: BigNumber;
        stakingThreshold: BigNumber;
        teamSize: BigNumber;
        stakingPlanId: BigNumber;
        isActive: boolean;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tryToAddMember(
      stakingPlanId: BigNumberish,
      referrer: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanReward(
      planId: BigNumberish,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanStakingId(
      planId: BigNumberish,
      stakingPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanStakingThreshold(
      planId: BigNumberish,
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      subscriptionCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlanTeamSize(
      planId: BigNumberish,
      size: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubscriptionPeriod(
      numDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    userHasPlanSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasSufficientStaking(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  addPlan(
    subscriptionCost_: BigNumberish,
    reward_: BigNumberish,
    stakingThreshold_: BigNumberish,
    teamSize_: BigNumberish,
    stakingPlanId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActivePlans(
    overrides?: CallOverrides
  ): Promise<ITeams.TeamPlanStructOutput[]>;

  getPlan(
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ITeams.TeamPlanStructOutput>;

  getPlans(overrides?: CallOverrides): Promise<ITeams.TeamPlanStructOutput[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSufficientPlanIdByStakingAmount(
    stakingPlanId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getUserSubscription(
    user: string,
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ITeams.TeamStructOutput>;

  getUserTeamMembers(
    user: string,
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasAnySubscription(user: string, overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    contractManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  plans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      teamPlanId: BigNumber;
      subscriptionCost: BigNumber;
      reward: BigNumber;
      stakingThreshold: BigNumber;
      teamSize: BigNumber;
      stakingPlanId: BigNumber;
      isActive: boolean;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribe(
    planId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tryToAddMember(
    stakingPlanId: BigNumberish,
    referrer: string,
    member: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanActivity(
    planId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanReward(
    planId: BigNumberish,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanStakingId(
    planId: BigNumberish,
    stakingPlanId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanStakingThreshold(
    planId: BigNumberish,
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionCost(
    planId: BigNumberish,
    subscriptionCost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlanTeamSize(
    planId: BigNumberish,
    size: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubscriptionPeriod(
    numDays: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  userHasPlanSubscription(
    user: string,
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasSufficientStaking(
    user: string,
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    addPlan(
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActivePlans(
      overrides?: CallOverrides
    ): Promise<ITeams.TeamPlanStructOutput[]>;

    getPlan(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ITeams.TeamPlanStructOutput>;

    getPlans(overrides?: CallOverrides): Promise<ITeams.TeamPlanStructOutput[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ITeams.TeamStructOutput>;

    getUserTeamMembers(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      contractManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        teamPlanId: BigNumber;
        subscriptionCost: BigNumber;
        reward: BigNumber;
        stakingThreshold: BigNumber;
        teamSize: BigNumber;
        stakingPlanId: BigNumber;
        isActive: boolean;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(planId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tryToAddMember(
      stakingPlanId: BigNumberish,
      referrer: string,
      member: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanReward(
      planId: BigNumberish,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanStakingId(
      planId: BigNumberish,
      stakingPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanStakingThreshold(
      planId: BigNumberish,
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      subscriptionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanTeamSize(
      planId: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionPeriod(
      numDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userHasPlanSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasSufficientStaking(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MemberAdded(address,uint256,address,uint256)"(
      user?: string | null,
      teamPlanId?: BigNumberish | null,
      member?: null,
      teamMembers?: null
    ): MemberAddedEventFilter;
    MemberAdded(
      user?: string | null,
      teamPlanId?: BigNumberish | null,
      member?: null,
      teamMembers?: null
    ): MemberAddedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Subscribed(address,uint256,uint256)"(
      subscriber?: string | null,
      teamPlanId?: BigNumberish | null,
      timestamp?: BigNumberish | null
    ): SubscribedEventFilter;
    Subscribed(
      subscriber?: string | null,
      teamPlanId?: BigNumberish | null,
      timestamp?: BigNumberish | null
    ): SubscribedEventFilter;

    "TeamFilled(address,uint256,uint256)"(
      user?: string | null,
      teamPlanId?: BigNumberish | null,
      teamCount?: BigNumberish | null
    ): TeamFilledEventFilter;
    TeamFilled(
      user?: string | null,
      teamPlanId?: BigNumberish | null,
      teamCount?: BigNumberish | null
    ): TeamFilledEventFilter;

    "TeamPlanActivityChanged(uint256,bool)"(
      teamPlanId?: BigNumberish | null,
      isActive?: null
    ): TeamPlanActivityChangedEventFilter;
    TeamPlanActivityChanged(
      teamPlanId?: BigNumberish | null,
      isActive?: null
    ): TeamPlanActivityChangedEventFilter;

    "TeamPlanCreated(uint256,uint256,uint256,uint256,uint256,uint256)"(
      teamPlanId?: BigNumberish | null,
      subscriptionCost?: null,
      reward?: null,
      stakingThreshold?: null,
      teamSize?: null,
      stakingPlanId?: null
    ): TeamPlanCreatedEventFilter;
    TeamPlanCreated(
      teamPlanId?: BigNumberish | null,
      subscriptionCost?: null,
      reward?: null,
      stakingThreshold?: null,
      teamSize?: null,
      stakingPlanId?: null
    ): TeamPlanCreatedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPlan(
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActivePlans(overrides?: CallOverrides): Promise<BigNumber>;

    getPlan(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTeamMembers(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    plans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryToAddMember(
      stakingPlanId: BigNumberish,
      referrer: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanReward(
      planId: BigNumberish,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanStakingId(
      planId: BigNumberish,
      stakingPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanStakingThreshold(
      planId: BigNumberish,
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      subscriptionCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlanTeamSize(
      planId: BigNumberish,
      size: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubscriptionPeriod(
      numDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    userHasPlanSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasSufficientStaking(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCRIPTION_PERIOD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPlan(
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActivePlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlan(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTeamMembers(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      contractManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribe(
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryToAddMember(
      stakingPlanId: BigNumberish,
      referrer: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanActivity(
      planId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanReward(
      planId: BigNumberish,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanStakingId(
      planId: BigNumberish,
      stakingPlanId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanStakingThreshold(
      planId: BigNumberish,
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionCost(
      planId: BigNumberish,
      subscriptionCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlanTeamSize(
      planId: BigNumberish,
      size: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionPeriod(
      numDays: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userHasPlanSubscription(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasSufficientStaking(
      user: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

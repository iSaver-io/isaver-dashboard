/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ITeams {
  export type TeamPlanStruct = {
    teamPlanId: BigNumberish;
    subscriptionCost: BigNumberish;
    reward: BigNumberish;
    stakingThreshold: BigNumberish;
    teamSize: BigNumberish;
    stakingPlanId: BigNumberish;
    isActive: boolean;
  };

  export type TeamPlanStructOutput = [
    teamPlanId: bigint,
    subscriptionCost: bigint,
    reward: bigint,
    stakingThreshold: bigint,
    teamSize: bigint,
    stakingPlanId: bigint,
    isActive: boolean
  ] & {
    teamPlanId: bigint;
    subscriptionCost: bigint;
    reward: bigint;
    stakingThreshold: bigint;
    teamSize: bigint;
    stakingPlanId: bigint;
    isActive: boolean;
  };

  export type TeamStruct = {
    subscription: BigNumberish;
    teamsFilled: BigNumberish;
  };

  export type TeamStructOutput = [subscription: bigint, teamsFilled: bigint] & {
    subscription: bigint;
    teamsFilled: bigint;
  };
}

export interface TeamsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "SUBSCRIPTION_PERIOD_DAYS"
      | "UPGRADER_ROLE"
      | "addPlan"
      | "getActivePlans"
      | "getPlan"
      | "getPlans"
      | "getRoleAdmin"
      | "getSufficientPlanIdByStakingAmount"
      | "getTimestamp"
      | "getUserSubscription"
      | "getUserTeamMembers"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "initialize"
      | "plans"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "subscribe"
      | "supportsInterface"
      | "tryToAddMember"
      | "updatePlanActivity"
      | "updatePlanReward"
      | "updatePlanStakingId"
      | "updatePlanStakingThreshold"
      | "updatePlanSubscriptionCost"
      | "updatePlanTeamSize"
      | "updateSubscriptionPeriod"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userHasPlanSubscription"
      | "userHasSufficientStaking"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "MemberAdded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Subscribed"
      | "TeamFilled"
      | "TeamPlanActivityChanged"
      | "TeamPlanCreated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPlan",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPlans", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTeamMembers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToAddMember",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanTeamSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPlanSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSufficientStaking",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTeamMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanTeamSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPlanSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSufficientStaking",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    teamPlanId: BigNumberish,
    member: AddressLike,
    teamMembers: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    teamPlanId: bigint,
    member: string,
    teamMembers: bigint
  ];
  export interface OutputObject {
    user: string;
    teamPlanId: bigint;
    member: string;
    teamMembers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    subscriber: AddressLike,
    teamPlanId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    subscriber: string,
    teamPlanId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    subscriber: string;
    teamPlanId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamFilledEvent {
  export type InputTuple = [
    user: AddressLike,
    teamPlanId: BigNumberish,
    teamCount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    teamPlanId: bigint,
    teamCount: bigint
  ];
  export interface OutputObject {
    user: string;
    teamPlanId: bigint;
    teamCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamPlanActivityChangedEvent {
  export type InputTuple = [teamPlanId: BigNumberish, isActive: boolean];
  export type OutputTuple = [teamPlanId: bigint, isActive: boolean];
  export interface OutputObject {
    teamPlanId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamPlanCreatedEvent {
  export type InputTuple = [
    teamPlanId: BigNumberish,
    subscriptionCost: BigNumberish,
    reward: BigNumberish,
    stakingThreshold: BigNumberish,
    teamSize: BigNumberish,
    stakingPlanId: BigNumberish
  ];
  export type OutputTuple = [
    teamPlanId: bigint,
    subscriptionCost: bigint,
    reward: bigint,
    stakingThreshold: bigint,
    teamSize: bigint,
    stakingPlanId: bigint
  ];
  export interface OutputObject {
    teamPlanId: bigint;
    subscriptionCost: bigint;
    reward: bigint;
    stakingThreshold: bigint;
    teamSize: bigint;
    stakingPlanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Teams extends BaseContract {
  connect(runner?: ContractRunner | null): Teams;
  waitForDeployment(): Promise<this>;

  interface: TeamsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SUBSCRIPTION_PERIOD_DAYS: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  addPlan: TypedContractMethod<
    [
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getActivePlans: TypedContractMethod<
    [],
    [ITeams.TeamPlanStructOutput[]],
    "view"
  >;

  getPlan: TypedContractMethod<
    [planId: BigNumberish],
    [ITeams.TeamPlanStructOutput],
    "view"
  >;

  getPlans: TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSufficientPlanIdByStakingAmount: TypedContractMethod<
    [stakingPlanId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getTimestamp: TypedContractMethod<[], [bigint], "view">;

  getUserSubscription: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [ITeams.TeamStructOutput],
    "view"
  >;

  getUserTeamMembers: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [string[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAnySubscription: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  plans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        teamPlanId: bigint;
        subscriptionCost: bigint;
        reward: bigint;
        stakingThreshold: bigint;
        teamSize: bigint;
        stakingPlanId: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tryToAddMember: TypedContractMethod<
    [
      stakingPlanId: BigNumberish,
      referrer: AddressLike,
      member: AddressLike,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  updatePlanActivity: TypedContractMethod<
    [planId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updatePlanReward: TypedContractMethod<
    [planId: BigNumberish, reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanStakingId: TypedContractMethod<
    [planId: BigNumberish, stakingPlanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanStakingThreshold: TypedContractMethod<
    [planId: BigNumberish, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanSubscriptionCost: TypedContractMethod<
    [planId: BigNumberish, subscriptionCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlanTeamSize: TypedContractMethod<
    [planId: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSubscriptionPeriod: TypedContractMethod<
    [numDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userHasPlanSubscription: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  userHasSufficientStaking: TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUBSCRIPTION_PERIOD_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addPlan"
  ): TypedContractMethod<
    [
      subscriptionCost_: BigNumberish,
      reward_: BigNumberish,
      stakingThreshold_: BigNumberish,
      teamSize_: BigNumberish,
      stakingPlanId_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActivePlans"
  ): TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlan"
  ): TypedContractMethod<
    [planId: BigNumberish],
    [ITeams.TeamPlanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlans"
  ): TypedContractMethod<[], [ITeams.TeamPlanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSufficientPlanIdByStakingAmount"
  ): TypedContractMethod<
    [stakingPlanId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserSubscription"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [ITeams.TeamStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTeamMembers"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAnySubscription"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [contractManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "plans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        teamPlanId: bigint;
        subscriptionCost: bigint;
        reward: bigint;
        stakingThreshold: bigint;
        teamSize: bigint;
        stakingPlanId: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tryToAddMember"
  ): TypedContractMethod<
    [
      stakingPlanId: BigNumberish,
      referrer: AddressLike,
      member: AddressLike,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanActivity"
  ): TypedContractMethod<
    [planId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanReward"
  ): TypedContractMethod<
    [planId: BigNumberish, reward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanStakingId"
  ): TypedContractMethod<
    [planId: BigNumberish, stakingPlanId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanStakingThreshold"
  ): TypedContractMethod<
    [planId: BigNumberish, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanSubscriptionCost"
  ): TypedContractMethod<
    [planId: BigNumberish, subscriptionCost: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlanTeamSize"
  ): TypedContractMethod<
    [planId: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSubscriptionPeriod"
  ): TypedContractMethod<[numDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userHasPlanSubscription"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userHasSufficientStaking"
  ): TypedContractMethod<
    [user: AddressLike, planId: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemberAdded"
  ): TypedContractEvent<
    MemberAddedEvent.InputTuple,
    MemberAddedEvent.OutputTuple,
    MemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "TeamFilled"
  ): TypedContractEvent<
    TeamFilledEvent.InputTuple,
    TeamFilledEvent.OutputTuple,
    TeamFilledEvent.OutputObject
  >;
  getEvent(
    key: "TeamPlanActivityChanged"
  ): TypedContractEvent<
    TeamPlanActivityChangedEvent.InputTuple,
    TeamPlanActivityChangedEvent.OutputTuple,
    TeamPlanActivityChangedEvent.OutputObject
  >;
  getEvent(
    key: "TeamPlanCreated"
  ): TypedContractEvent<
    TeamPlanCreatedEvent.InputTuple,
    TeamPlanCreatedEvent.OutputTuple,
    TeamPlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MemberAdded(address,uint256,address,uint256)": TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;
    MemberAdded: TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Subscribed(address,uint256,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "TeamFilled(address,uint256,uint256)": TypedContractEvent<
      TeamFilledEvent.InputTuple,
      TeamFilledEvent.OutputTuple,
      TeamFilledEvent.OutputObject
    >;
    TeamFilled: TypedContractEvent<
      TeamFilledEvent.InputTuple,
      TeamFilledEvent.OutputTuple,
      TeamFilledEvent.OutputObject
    >;

    "TeamPlanActivityChanged(uint256,bool)": TypedContractEvent<
      TeamPlanActivityChangedEvent.InputTuple,
      TeamPlanActivityChangedEvent.OutputTuple,
      TeamPlanActivityChangedEvent.OutputObject
    >;
    TeamPlanActivityChanged: TypedContractEvent<
      TeamPlanActivityChangedEvent.InputTuple,
      TeamPlanActivityChangedEvent.OutputTuple,
      TeamPlanActivityChangedEvent.OutputObject
    >;

    "TeamPlanCreated(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TeamPlanCreatedEvent.InputTuple,
      TeamPlanCreatedEvent.OutputTuple,
      TeamPlanCreatedEvent.OutputObject
    >;
    TeamPlanCreated: TypedContractEvent<
      TeamPlanCreatedEvent.InputTuple,
      TeamPlanCreatedEvent.OutputTuple,
      TeamPlanCreatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

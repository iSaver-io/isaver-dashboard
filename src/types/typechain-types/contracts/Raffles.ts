/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IRaffles {
  export type RoundStruct = {
    id: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: BigNumberish;
    totalPrize: BigNumberish;
    maxTicketsFromOneMember: BigNumberish;
    tokensForOneTicket: BigNumberish;
    winnersForLevel: BigNumberish[];
    prizeForLevel: BigNumberish[];
    totalTickets: BigNumberish;
    members: string[];
    randomWord: BigNumberish;
    winners: string[][];
  };

  export type RoundStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber,
    string[],
    BigNumber,
    string[][]
  ] & {
    id: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: BigNumber;
    totalPrize: BigNumber;
    maxTicketsFromOneMember: BigNumber;
    tokensForOneTicket: BigNumber;
    winnersForLevel: BigNumber[];
    prizeForLevel: BigNumber[];
    totalTickets: BigNumber;
    members: string[];
    randomWord: BigNumber;
    winners: string[][];
  };
}

export interface RafflesInterface extends utils.Interface {
  functions: {
    "CLAIM_PERIOD()": FunctionFragment;
    "DAYS_STREAK_FOR_TICKET()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "TICKET_ID()": FunctionFragment;
    "TICKET_PRICE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "buyTickets(uint256)": FunctionFragment;
    "claimDay()": FunctionFragment;
    "createRaffleRound(uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "entryRaffle(uint256,uint256)": FunctionFragment;
    "extraTicketsPowerD()": FunctionFragment;
    "extract(address,uint256)": FunctionFragment;
    "finishRaffleRound(uint256)": FunctionFragment;
    "getActiveRounds()": FunctionFragment;
    "getClaimStreak(address)": FunctionFragment;
    "getLastClaimTime(address)": FunctionFragment;
    "getLastFinishedRounds(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getRounds()": FunctionFragment;
    "getTotalRounds()": FunctionFragment;
    "getUserRoundEntry(address,uint256)": FunctionFragment;
    "getWinnerPrize(address)": FunctionFragment;
    "getWinnersFromOracleRandom(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,address,uint64,bytes32)": FunctionFragment;
    "isClaimAvailable(address)": FunctionFragment;
    "isMintAvailable(address)": FunctionFragment;
    "mintMyTicket()": FunctionFragment;
    "oracleRequests(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalBurnedTickets()": FunctionFragment;
    "updateCallbackGasLimit(uint32)": FunctionFragment;
    "updateClaimPeriod(uint256)": FunctionFragment;
    "updateCoordinator(address)": FunctionFragment;
    "updateDaysStreakForTicket(uint256)": FunctionFragment;
    "updateExtraTicketsPowerD(uint256)": FunctionFragment;
    "updateKeyHash(bytes32)": FunctionFragment;
    "updateRequestConfirmations(uint16)": FunctionFragment;
    "updateSubscriptionId(uint64)": FunctionFragment;
    "updateTicketId(uint256)": FunctionFragment;
    "updateTicketPrice(uint256)": FunctionFragment;
    "updateWinnerCalculationInRequest(bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAIM_PERIOD"
      | "DAYS_STREAK_FOR_TICKET"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "TICKET_ID"
      | "TICKET_PRICE"
      | "UPGRADER_ROLE"
      | "buyTickets"
      | "claimDay"
      | "createRaffleRound"
      | "entryRaffle"
      | "extraTicketsPowerD"
      | "extract"
      | "finishRaffleRound"
      | "getActiveRounds"
      | "getClaimStreak"
      | "getLastClaimTime"
      | "getLastFinishedRounds"
      | "getRoleAdmin"
      | "getRound"
      | "getRounds"
      | "getTotalRounds"
      | "getUserRoundEntry"
      | "getWinnerPrize"
      | "getWinnersFromOracleRandom"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isClaimAvailable"
      | "isMintAvailable"
      | "mintMyTicket"
      | "oracleRequests"
      | "proxiableUUID"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "revokeRole"
      | "rounds"
      | "supportsInterface"
      | "totalBurnedTickets"
      | "updateCallbackGasLimit"
      | "updateClaimPeriod"
      | "updateCoordinator"
      | "updateDaysStreakForTicket"
      | "updateExtraTicketsPowerD"
      | "updateKeyHash"
      | "updateRequestConfirmations"
      | "updateSubscriptionId"
      | "updateTicketId"
      | "updateTicketPrice"
      | "updateWinnerCalculationInRequest"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAYS_STREAK_FOR_TICKET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TICKET_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TICKET_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createRaffleRound",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "entryRaffle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extraTicketsPowerD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRaffleRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimStreak",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastClaimTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastFinishedRounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRounds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundEntry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerPrize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnersFromOracleRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMyTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurnedTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoordinator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDaysStreakForTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExtraTicketsPowerD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWinnerCalculationInRequest",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAYS_STREAK_FOR_TICKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TICKET_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TICKET_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRaffleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entryRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraTicketsPowerD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishRaffleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastFinishedRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnersFromOracleRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBurnedTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDaysStreakForTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExtraTicketsPowerD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWinnerCalculationInRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewRoundCreated(uint256)": EventFragment;
    "OracleRequestFulfilled(uint256,uint256,uint256)": EventFragment;
    "OracleRequestSent(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoundEntered(address,uint256,uint256)": EventFragment;
    "RoundFinished(uint256)": EventFragment;
    "TicketsCollected(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRoundCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewRoundCreatedEventObject {
  roundId: BigNumber;
}
export type NewRoundCreatedEvent = TypedEvent<
  [BigNumber],
  NewRoundCreatedEventObject
>;

export type NewRoundCreatedEventFilter = TypedEventFilter<NewRoundCreatedEvent>;

export interface OracleRequestFulfilledEventObject {
  roundId: BigNumber;
  requestId: BigNumber;
  randomWord: BigNumber;
}
export type OracleRequestFulfilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  OracleRequestFulfilledEventObject
>;

export type OracleRequestFulfilledEventFilter =
  TypedEventFilter<OracleRequestFulfilledEvent>;

export interface OracleRequestSentEventObject {
  roundId: BigNumber;
  requestId: BigNumber;
}
export type OracleRequestSentEvent = TypedEvent<
  [BigNumber, BigNumber],
  OracleRequestSentEventObject
>;

export type OracleRequestSentEventFilter =
  TypedEventFilter<OracleRequestSentEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoundEnteredEventObject {
  user: string;
  roundId: BigNumber;
  tickets: BigNumber;
}
export type RoundEnteredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RoundEnteredEventObject
>;

export type RoundEnteredEventFilter = TypedEventFilter<RoundEnteredEvent>;

export interface RoundFinishedEventObject {
  roundId: BigNumber;
}
export type RoundFinishedEvent = TypedEvent<
  [BigNumber],
  RoundFinishedEventObject
>;

export type RoundFinishedEventFilter = TypedEventFilter<RoundFinishedEvent>;

export interface TicketsCollectedEventObject {
  member: string;
  amount: BigNumber;
}
export type TicketsCollectedEvent = TypedEvent<
  [string, BigNumber],
  TicketsCollectedEventObject
>;

export type TicketsCollectedEventFilter =
  TypedEventFilter<TicketsCollectedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Raffles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RafflesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    DAYS_STREAK_FOR_TICKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TICKET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    TICKET_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buyTickets(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimDay(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createRaffleRound(
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    entryRaffle(
      roundId: BigNumberish,
      tickets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extraTicketsPowerD(overrides?: CallOverrides): Promise<[BigNumber]>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finishRaffleRound(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActiveRounds(
      overrides?: CallOverrides
    ): Promise<[IRaffles.RoundStructOutput[]]>;

    getClaimStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastClaimTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastFinishedRounds(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IRaffles.RoundStructOutput[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRound(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IRaffles.RoundStructOutput]>;

    getRounds(
      overrides?: CallOverrides
    ): Promise<[IRaffles.RoundStructOutput[]]>;

    getTotalRounds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserRoundEntry(
      user: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinnerPrize(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinnersFromOracleRandom(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: string,
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isClaimAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMintAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintMyTicket(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    oracleRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        duration: BigNumber;
        isClosed: boolean;
        isOracleFulfilled: boolean;
        isFinished: boolean;
        initialPrize: BigNumber;
        totalPrize: BigNumber;
        maxTicketsFromOneMember: BigNumber;
        tokensForOneTicket: BigNumber;
        totalTickets: BigNumber;
        randomWord: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalBurnedTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateClaimPeriod(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateCoordinator(
      coordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDaysStreakForTicket(
      daysNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateExtraTicketsPowerD(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTicketId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateWinnerCalculationInRequest(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  DAYS_STREAK_FOR_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  TICKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  TICKET_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  buyTickets(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimDay(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createRaffleRound(
    startTime: BigNumberish,
    duration: BigNumberish,
    initialPrize: BigNumberish,
    tokensForOneTicket: BigNumberish,
    maxTicketsFromOneMember: BigNumberish,
    winnersForLevel: BigNumberish[],
    prizeForLevel: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  entryRaffle(
    roundId: BigNumberish,
    tickets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extraTicketsPowerD(overrides?: CallOverrides): Promise<BigNumber>;

  extract(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finishRaffleRound(
    roundId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActiveRounds(
    overrides?: CallOverrides
  ): Promise<IRaffles.RoundStructOutput[]>;

  getClaimStreak(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLastClaimTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLastFinishedRounds(
    length: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRaffles.RoundStructOutput[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRound(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRaffles.RoundStructOutput>;

  getRounds(overrides?: CallOverrides): Promise<IRaffles.RoundStructOutput[]>;

  getTotalRounds(overrides?: CallOverrides): Promise<BigNumber>;

  getUserRoundEntry(
    user: string,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinnerPrize(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getWinnersFromOracleRandom(
    roundId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    ticketPrice: BigNumberish,
    ticketId: BigNumberish,
    daysStreakForTicket: BigNumberish,
    contractManagerAddress: string,
    coordinator: string,
    subscriptionId: BigNumberish,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isClaimAvailable(user: string, overrides?: CallOverrides): Promise<boolean>;

  isMintAvailable(user: string, overrides?: CallOverrides): Promise<boolean>;

  mintMyTicket(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  oracleRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      startTime: BigNumber;
      duration: BigNumber;
      isClosed: boolean;
      isOracleFulfilled: boolean;
      isFinished: boolean;
      initialPrize: BigNumber;
      totalPrize: BigNumber;
      maxTicketsFromOneMember: BigNumber;
      tokensForOneTicket: BigNumber;
      totalTickets: BigNumber;
      randomWord: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalBurnedTickets(overrides?: CallOverrides): Promise<BigNumber>;

  updateCallbackGasLimit(
    gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateClaimPeriod(
    sec: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateCoordinator(
    coordinator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDaysStreakForTicket(
    daysNum: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateExtraTicketsPowerD(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKeyHash(
    kayHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRequestConfirmations(
    confirmations: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubscriptionId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTicketId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTicketPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateWinnerCalculationInRequest(
    isEnabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    DAYS_STREAK_FOR_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    TICKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    TICKET_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    buyTickets(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimDay(overrides?: CallOverrides): Promise<void>;

    createRaffleRound(
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    entryRaffle(
      roundId: BigNumberish,
      tickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extraTicketsPowerD(overrides?: CallOverrides): Promise<BigNumber>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRaffleRound(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveRounds(
      overrides?: CallOverrides
    ): Promise<IRaffles.RoundStructOutput[]>;

    getClaimStreak(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLastClaimTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastFinishedRounds(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRaffles.RoundStructOutput[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRound(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRaffles.RoundStructOutput>;

    getRounds(overrides?: CallOverrides): Promise<IRaffles.RoundStructOutput[]>;

    getTotalRounds(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRoundEntry(
      user: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinnerPrize(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getWinnersFromOracleRandom(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: string,
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimAvailable(user: string, overrides?: CallOverrides): Promise<boolean>;

    isMintAvailable(user: string, overrides?: CallOverrides): Promise<boolean>;

    mintMyTicket(overrides?: CallOverrides): Promise<void>;

    oracleRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        duration: BigNumber;
        isClosed: boolean;
        isOracleFulfilled: boolean;
        isFinished: boolean;
        initialPrize: BigNumber;
        totalPrize: BigNumber;
        maxTicketsFromOneMember: BigNumber;
        tokensForOneTicket: BigNumber;
        totalTickets: BigNumber;
        randomWord: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalBurnedTickets(overrides?: CallOverrides): Promise<BigNumber>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateClaimPeriod(
      sec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoordinator(
      coordinator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDaysStreakForTicket(
      daysNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExtraTicketsPowerD(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeyHash(kayHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTicketId(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateTicketPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWinnerCalculationInRequest(
      isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewRoundCreated(uint256)"(
      roundId?: BigNumberish | null
    ): NewRoundCreatedEventFilter;
    NewRoundCreated(roundId?: BigNumberish | null): NewRoundCreatedEventFilter;

    "OracleRequestFulfilled(uint256,uint256,uint256)"(
      roundId?: BigNumberish | null,
      requestId?: BigNumberish | null,
      randomWord?: null
    ): OracleRequestFulfilledEventFilter;
    OracleRequestFulfilled(
      roundId?: BigNumberish | null,
      requestId?: BigNumberish | null,
      randomWord?: null
    ): OracleRequestFulfilledEventFilter;

    "OracleRequestSent(uint256,uint256)"(
      roundId?: BigNumberish | null,
      requestId?: BigNumberish | null
    ): OracleRequestSentEventFilter;
    OracleRequestSent(
      roundId?: BigNumberish | null,
      requestId?: BigNumberish | null
    ): OracleRequestSentEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "RoundEntered(address,uint256,uint256)"(
      user?: string | null,
      roundId?: null,
      tickets?: null
    ): RoundEnteredEventFilter;
    RoundEntered(
      user?: string | null,
      roundId?: null,
      tickets?: null
    ): RoundEnteredEventFilter;

    "RoundFinished(uint256)"(
      roundId?: BigNumberish | null
    ): RoundFinishedEventFilter;
    RoundFinished(roundId?: BigNumberish | null): RoundFinishedEventFilter;

    "TicketsCollected(address,uint256)"(
      member?: string | null,
      amount?: null
    ): TicketsCollectedEventFilter;
    TicketsCollected(
      member?: string | null,
      amount?: null
    ): TicketsCollectedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    DAYS_STREAK_FOR_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TICKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    TICKET_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buyTickets(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimDay(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    createRaffleRound(
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    entryRaffle(
      roundId: BigNumberish,
      tickets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extraTicketsPowerD(overrides?: CallOverrides): Promise<BigNumber>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finishRaffleRound(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActiveRounds(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimStreak(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLastClaimTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastFinishedRounds(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRound(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRounds(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRounds(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRoundEntry(
      user: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinnerPrize(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getWinnersFromOracleRandom(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: string,
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isClaimAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMyTicket(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    oracleRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBurnedTickets(overrides?: CallOverrides): Promise<BigNumber>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateClaimPeriod(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateCoordinator(
      coordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDaysStreakForTicket(
      daysNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateExtraTicketsPowerD(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTicketId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateWinnerCalculationInRequest(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAYS_STREAK_FOR_TICKET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TICKET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TICKET_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTickets(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimDay(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createRaffleRound(
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    entryRaffle(
      roundId: BigNumberish,
      tickets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extraTicketsPowerD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finishRaffleRound(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActiveRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastClaimTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastFinishedRounds(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRound(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRoundEntry(
      user: string,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinnerPrize(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinnersFromOracleRandom(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: string,
      coordinator: string,
      subscriptionId: BigNumberish,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isClaimAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintMyTicket(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    oracleRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBurnedTickets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCallbackGasLimit(
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateClaimPeriod(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateCoordinator(
      coordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDaysStreakForTicket(
      daysNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateExtraTicketsPowerD(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKeyHash(
      kayHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRequestConfirmations(
      confirmations: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTicketId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateWinnerCalculationInRequest(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

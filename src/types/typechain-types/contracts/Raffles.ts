/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IRaffles {
  export type RoundStruct = {
    id: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: BigNumberish;
    totalPrize: BigNumberish;
    maxTicketsFromOneMember: BigNumberish;
    tokensForOneTicket: BigNumberish;
    winnersForLevel: BigNumberish[];
    prizeForLevel: BigNumberish[];
    totalTickets: BigNumberish;
    members: AddressLike[];
    randomWord: BigNumberish;
    winners: AddressLike[][];
  };

  export type RoundStructOutput = [
    id: bigint,
    startTime: bigint,
    duration: bigint,
    isClosed: boolean,
    isOracleFulfilled: boolean,
    isFinished: boolean,
    initialPrize: bigint,
    totalPrize: bigint,
    maxTicketsFromOneMember: bigint,
    tokensForOneTicket: bigint,
    winnersForLevel: bigint[],
    prizeForLevel: bigint[],
    totalTickets: bigint,
    members: string[],
    randomWord: bigint,
    winners: string[][]
  ] & {
    id: bigint;
    startTime: bigint;
    duration: bigint;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: bigint;
    totalPrize: bigint;
    maxTicketsFromOneMember: bigint;
    tokensForOneTicket: bigint;
    winnersForLevel: bigint[];
    prizeForLevel: bigint[];
    totalTickets: bigint;
    members: string[];
    randomWord: bigint;
    winners: string[][];
  };
}

export interface RafflesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLAIM_PERIOD"
      | "DAYS_STREAK_FOR_TICKET"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "TICKET_ID"
      | "TICKET_PRICE"
      | "UPGRADER_ROLE"
      | "buyTickets"
      | "claimDay"
      | "createRaffleRound"
      | "entryRaffle"
      | "finishRaffleRound"
      | "getActiveRounds"
      | "getClaimStreak"
      | "getLastClaimTime"
      | "getLastFinishedRounds"
      | "getRoleAdmin"
      | "getRound"
      | "getRounds"
      | "getTotalRounds"
      | "getUserRoundEntry"
      | "getWinnerPrize"
      | "getWinnersFromOracleRandom"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isClaimAvailable"
      | "isMintAvailable"
      | "mintMyTicket"
      | "oracleRequests"
      | "proxiableUUID"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "revokeRole"
      | "rounds"
      | "supportsInterface"
      | "updateCallbackGasLimit"
      | "updateClaimPeriod"
      | "updateCoordinator"
      | "updateDaysStreakForTicket"
      | "updateKeyHash"
      | "updateRequestConfirmations"
      | "updateSubscriptionId"
      | "updateTicketId"
      | "updateTicketPrice"
      | "updateWinnerCalculationInRequest"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "LiquidityWithdrawnByAdmin"
      | "NewRoundCreated"
      | "OracleRequestFulfilled"
      | "OracleRequestSent"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoundFinished"
      | "TicketsCollected"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAYS_STREAK_FOR_TICKET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TICKET_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TICKET_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createRaffleRound",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "entryRaffle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRaffleRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastClaimTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastFinishedRounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRounds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundEntry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerPrize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnersFromOracleRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimAvailable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintAvailable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMyTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoordinator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDaysStreakForTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWinnerCalculationInRequest",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAYS_STREAK_FOR_TICKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TICKET_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TICKET_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRaffleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entryRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRaffleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastFinishedRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnersFromOracleRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDaysStreakForTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWinnerCalculationInRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityWithdrawnByAdminEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRoundCreatedEvent {
  export type InputTuple = [roundId: BigNumberish];
  export type OutputTuple = [roundId: bigint];
  export interface OutputObject {
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestFulfilledEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    requestId: BigNumberish,
    randomWord: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    requestId: bigint,
    randomWord: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    requestId: bigint;
    randomWord: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestSentEvent {
  export type InputTuple = [roundId: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [roundId: bigint, requestId: bigint];
  export interface OutputObject {
    roundId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundFinishedEvent {
  export type InputTuple = [roundId: BigNumberish];
  export type OutputTuple = [roundId: bigint];
  export interface OutputObject {
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketsCollectedEvent {
  export type InputTuple = [member: AddressLike, amount: BigNumberish];
  export type OutputTuple = [member: string, amount: bigint];
  export interface OutputObject {
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Raffles extends BaseContract {
  connect(runner?: ContractRunner | null): Raffles;
  waitForDeployment(): Promise<this>;

  interface: RafflesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLAIM_PERIOD: TypedContractMethod<[], [bigint], "view">;

  DAYS_STREAK_FOR_TICKET: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  TICKET_ID: TypedContractMethod<[], [bigint], "view">;

  TICKET_PRICE: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  buyTickets: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  claimDay: TypedContractMethod<[], [void], "nonpayable">;

  createRaffleRound: TypedContractMethod<
    [
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  entryRaffle: TypedContractMethod<
    [roundId: BigNumberish, tickets: BigNumberish],
    [void],
    "nonpayable"
  >;

  finishRaffleRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveRounds: TypedContractMethod<
    [],
    [IRaffles.RoundStructOutput[]],
    "view"
  >;

  getClaimStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLastClaimTime: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLastFinishedRounds: TypedContractMethod<
    [length: BigNumberish, offset: BigNumberish],
    [IRaffles.RoundStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRound: TypedContractMethod<
    [id: BigNumberish],
    [IRaffles.RoundStructOutput],
    "view"
  >;

  getRounds: TypedContractMethod<[], [IRaffles.RoundStructOutput[]], "view">;

  getTotalRounds: TypedContractMethod<[], [bigint], "view">;

  getUserRoundEntry: TypedContractMethod<
    [user: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getWinnerPrize: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getWinnersFromOracleRandom: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: AddressLike,
      coordinator: AddressLike,
      subscriptionId: BigNumberish,
      keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isClaimAvailable: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isMintAvailable: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  mintMyTicket: TypedContractMethod<[], [void], "nonpayable">;

  oracleRequests: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        startTime: bigint;
        duration: bigint;
        isClosed: boolean;
        isOracleFulfilled: boolean;
        isFinished: boolean;
        initialPrize: bigint;
        totalPrize: bigint;
        maxTicketsFromOneMember: bigint;
        tokensForOneTicket: bigint;
        totalTickets: bigint;
        randomWord: bigint;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateCallbackGasLimit: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateClaimPeriod: TypedContractMethod<
    [sec: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCoordinator: TypedContractMethod<
    [coordinator: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDaysStreakForTicket: TypedContractMethod<
    [daysNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateKeyHash: TypedContractMethod<
    [kayHash: BytesLike],
    [void],
    "nonpayable"
  >;

  updateRequestConfirmations: TypedContractMethod<
    [confirmations: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSubscriptionId: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTicketId: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  updateTicketPrice: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWinnerCalculationInRequest: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLAIM_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAYS_STREAK_FOR_TICKET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TICKET_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TICKET_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyTickets"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRaffleRound"
  ): TypedContractMethod<
    [
      startTime: BigNumberish,
      duration: BigNumberish,
      initialPrize: BigNumberish,
      tokensForOneTicket: BigNumberish,
      maxTicketsFromOneMember: BigNumberish,
      winnersForLevel: BigNumberish[],
      prizeForLevel: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entryRaffle"
  ): TypedContractMethod<
    [roundId: BigNumberish, tickets: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finishRaffleRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveRounds"
  ): TypedContractMethod<[], [IRaffles.RoundStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getClaimStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastClaimTime"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastFinishedRounds"
  ): TypedContractMethod<
    [length: BigNumberish, offset: BigNumberish],
    [IRaffles.RoundStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IRaffles.RoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRounds"
  ): TypedContractMethod<[], [IRaffles.RoundStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTotalRounds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRoundEntry"
  ): TypedContractMethod<
    [user: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinnerPrize"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinnersFromOracleRandom"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      ticketPrice: BigNumberish,
      ticketId: BigNumberish,
      daysStreakForTicket: BigNumberish,
      contractManagerAddress: AddressLike,
      coordinator: AddressLike,
      subscriptionId: BigNumberish,
      keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isClaimAvailable"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMintAvailable"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintMyTicket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "oracleRequests"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        startTime: bigint;
        duration: bigint;
        isClosed: boolean;
        isOracleFulfilled: boolean;
        isFinished: boolean;
        initialPrize: bigint;
        totalPrize: bigint;
        maxTicketsFromOneMember: bigint;
        tokensForOneTicket: bigint;
        totalTickets: bigint;
        randomWord: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateCallbackGasLimit"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateClaimPeriod"
  ): TypedContractMethod<[sec: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCoordinator"
  ): TypedContractMethod<[coordinator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDaysStreakForTicket"
  ): TypedContractMethod<[daysNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateKeyHash"
  ): TypedContractMethod<[kayHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRequestConfirmations"
  ): TypedContractMethod<[confirmations: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSubscriptionId"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTicketId"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTicketPrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWinnerCalculationInRequest"
  ): TypedContractMethod<[isEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityWithdrawnByAdmin"
  ): TypedContractEvent<
    LiquidityWithdrawnByAdminEvent.InputTuple,
    LiquidityWithdrawnByAdminEvent.OutputTuple,
    LiquidityWithdrawnByAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewRoundCreated"
  ): TypedContractEvent<
    NewRoundCreatedEvent.InputTuple,
    NewRoundCreatedEvent.OutputTuple,
    NewRoundCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequestFulfilled"
  ): TypedContractEvent<
    OracleRequestFulfilledEvent.InputTuple,
    OracleRequestFulfilledEvent.OutputTuple,
    OracleRequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequestSent"
  ): TypedContractEvent<
    OracleRequestSentEvent.InputTuple,
    OracleRequestSentEvent.OutputTuple,
    OracleRequestSentEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoundFinished"
  ): TypedContractEvent<
    RoundFinishedEvent.InputTuple,
    RoundFinishedEvent.OutputTuple,
    RoundFinishedEvent.OutputObject
  >;
  getEvent(
    key: "TicketsCollected"
  ): TypedContractEvent<
    TicketsCollectedEvent.InputTuple,
    TicketsCollectedEvent.OutputTuple,
    TicketsCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidityWithdrawnByAdmin(address,uint256)": TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;
    LiquidityWithdrawnByAdmin: TypedContractEvent<
      LiquidityWithdrawnByAdminEvent.InputTuple,
      LiquidityWithdrawnByAdminEvent.OutputTuple,
      LiquidityWithdrawnByAdminEvent.OutputObject
    >;

    "NewRoundCreated(uint256)": TypedContractEvent<
      NewRoundCreatedEvent.InputTuple,
      NewRoundCreatedEvent.OutputTuple,
      NewRoundCreatedEvent.OutputObject
    >;
    NewRoundCreated: TypedContractEvent<
      NewRoundCreatedEvent.InputTuple,
      NewRoundCreatedEvent.OutputTuple,
      NewRoundCreatedEvent.OutputObject
    >;

    "OracleRequestFulfilled(uint256,uint256,uint256)": TypedContractEvent<
      OracleRequestFulfilledEvent.InputTuple,
      OracleRequestFulfilledEvent.OutputTuple,
      OracleRequestFulfilledEvent.OutputObject
    >;
    OracleRequestFulfilled: TypedContractEvent<
      OracleRequestFulfilledEvent.InputTuple,
      OracleRequestFulfilledEvent.OutputTuple,
      OracleRequestFulfilledEvent.OutputObject
    >;

    "OracleRequestSent(uint256,uint256)": TypedContractEvent<
      OracleRequestSentEvent.InputTuple,
      OracleRequestSentEvent.OutputTuple,
      OracleRequestSentEvent.OutputObject
    >;
    OracleRequestSent: TypedContractEvent<
      OracleRequestSentEvent.InputTuple,
      OracleRequestSentEvent.OutputTuple,
      OracleRequestSentEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoundFinished(uint256)": TypedContractEvent<
      RoundFinishedEvent.InputTuple,
      RoundFinishedEvent.OutputTuple,
      RoundFinishedEvent.OutputObject
    >;
    RoundFinished: TypedContractEvent<
      RoundFinishedEvent.InputTuple,
      RoundFinishedEvent.OutputTuple,
      RoundFinishedEvent.OutputObject
    >;

    "TicketsCollected(address,uint256)": TypedContractEvent<
      TicketsCollectedEvent.InputTuple,
      TicketsCollectedEvent.OutputTuple,
      TicketsCollectedEvent.OutputObject
    >;
    TicketsCollected: TypedContractEvent<
      TicketsCollectedEvent.InputTuple,
      TicketsCollectedEvent.OutputTuple,
      TicketsCollectedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface BlackListInterface extends utils.Interface {
  functions: {
    "isAddressInBlackList(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isAddressInBlackList"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isAddressInBlackList",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isAddressInBlackList",
    data: BytesLike
  ): Result;

  events: {
    "BlackListAdded(address[],address)": EventFragment;
    "BlackListRemoved(address[],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlackListAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlackListRemoved"): EventFragment;
}

export interface BlackListAddedEventObject {
  _addresses: string[];
  admin: string;
}
export type BlackListAddedEvent = TypedEvent<
  [string[], string],
  BlackListAddedEventObject
>;

export type BlackListAddedEventFilter = TypedEventFilter<BlackListAddedEvent>;

export interface BlackListRemovedEventObject {
  _addresses: string[];
  admin: string;
}
export type BlackListRemovedEvent = TypedEvent<
  [string[], string],
  BlackListRemovedEventObject
>;

export type BlackListRemovedEventFilter =
  TypedEventFilter<BlackListRemovedEvent>;

export interface BlackList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlackListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAddressInBlackList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isAddressInBlackList(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isAddressInBlackList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BlackListAdded(address[],address)"(
      _addresses?: null,
      admin?: null
    ): BlackListAddedEventFilter;
    BlackListAdded(_addresses?: null, admin?: null): BlackListAddedEventFilter;

    "BlackListRemoved(address[],address)"(
      _addresses?: null,
      admin?: null
    ): BlackListRemovedEventFilter;
    BlackListRemoved(
      _addresses?: null,
      admin?: null
    ): BlackListRemovedEventFilter;
  };

  estimateGas: {
    isAddressInBlackList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAddressInBlackList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

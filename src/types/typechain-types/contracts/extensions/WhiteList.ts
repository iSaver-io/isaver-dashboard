/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface WhiteListInterface extends utils.Interface {
  functions: {
    "isAddressInWhiteList(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isAddressInWhiteList"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isAddressInWhiteList",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isAddressInWhiteList",
    data: BytesLike
  ): Result;

  events: {
    "WhiteListAdded(address[],address)": EventFragment;
    "WhiteListRemoved(address[],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WhiteListAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListRemoved"): EventFragment;
}

export interface WhiteListAddedEventObject {
  _addresses: string[];
  admin: string;
}
export type WhiteListAddedEvent = TypedEvent<
  [string[], string],
  WhiteListAddedEventObject
>;

export type WhiteListAddedEventFilter = TypedEventFilter<WhiteListAddedEvent>;

export interface WhiteListRemovedEventObject {
  _addresses: string[];
  admin: string;
}
export type WhiteListRemovedEvent = TypedEvent<
  [string[], string],
  WhiteListRemovedEventObject
>;

export type WhiteListRemovedEventFilter =
  TypedEventFilter<WhiteListRemovedEvent>;

export interface WhiteList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhiteListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAddressInWhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isAddressInWhiteList(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isAddressInWhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "WhiteListAdded(address[],address)"(
      _addresses?: null,
      admin?: null
    ): WhiteListAddedEventFilter;
    WhiteListAdded(_addresses?: null, admin?: null): WhiteListAddedEventFilter;

    "WhiteListRemoved(address[],address)"(
      _addresses?: null,
      admin?: null
    ): WhiteListRemovedEventFilter;
    WhiteListRemoved(
      _addresses?: null,
      admin?: null
    ): WhiteListRemovedEventFilter;
  };

  estimateGas: {
    isAddressInWhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAddressInWhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WhiteListInterface extends Interface {
  getFunction(nameOrSignature: "isAddressInWhiteList"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "WhiteListAdded" | "WhiteListRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isAddressInWhiteList",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isAddressInWhiteList",
    data: BytesLike
  ): Result;
}

export namespace WhiteListAddedEvent {
  export type InputTuple = [_addresses: AddressLike[], admin: AddressLike];
  export type OutputTuple = [_addresses: string[], admin: string];
  export interface OutputObject {
    _addresses: string[];
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhiteListRemovedEvent {
  export type InputTuple = [_addresses: AddressLike[], admin: AddressLike];
  export type OutputTuple = [_addresses: string[], admin: string];
  export interface OutputObject {
    _addresses: string[];
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WhiteList extends BaseContract {
  connect(runner?: ContractRunner | null): WhiteList;
  waitForDeployment(): Promise<this>;

  interface: WhiteListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isAddressInWhiteList: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isAddressInWhiteList"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  getEvent(
    key: "WhiteListAdded"
  ): TypedContractEvent<
    WhiteListAddedEvent.InputTuple,
    WhiteListAddedEvent.OutputTuple,
    WhiteListAddedEvent.OutputObject
  >;
  getEvent(
    key: "WhiteListRemoved"
  ): TypedContractEvent<
    WhiteListRemovedEvent.InputTuple,
    WhiteListRemovedEvent.OutputTuple,
    WhiteListRemovedEvent.OutputObject
  >;

  filters: {
    "WhiteListAdded(address[],address)": TypedContractEvent<
      WhiteListAddedEvent.InputTuple,
      WhiteListAddedEvent.OutputTuple,
      WhiteListAddedEvent.OutputObject
    >;
    WhiteListAdded: TypedContractEvent<
      WhiteListAddedEvent.InputTuple,
      WhiteListAddedEvent.OutputTuple,
      WhiteListAddedEvent.OutputObject
    >;

    "WhiteListRemoved(address[],address)": TypedContractEvent<
      WhiteListRemovedEvent.InputTuple,
      WhiteListRemovedEvent.OutputTuple,
      WhiteListRemovedEvent.OutputObject
    >;
    WhiteListRemoved: TypedContractEvent<
      WhiteListRemovedEvent.InputTuple,
      WhiteListRemovedEvent.OutputTuple,
      WhiteListRemovedEvent.OutputObject
    >;
  };
}
